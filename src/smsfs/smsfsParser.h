/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : /home/dfranusic/antlr-c-test/smsfs.g
 *     -                            On : 2012-01-30 19:07:13
 *     -                for the parser : smsfsParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser smsfsParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef psmsfsParser, which is returned from a call to smsfsParserNew().
 *
 * The methods in psmsfsParser are  as follows:
 *
 *  - smsfsParser_input_return      psmsfsParser->input(psmsfsParser)
 *  - smsfsParser_eval_nai_return      psmsfsParser->eval_nai(psmsfsParser)
 *  - smsfsParser_smpp_eval_np_return      psmsfsParser->smpp_eval_np(psmsfsParser)
 *  - smsfsParser_eval_np_return      psmsfsParser->eval_np(psmsfsParser)
 *  - smsfsParser_eval_gti_return      psmsfsParser->eval_gti(psmsfsParser)
 *  - smsfsParser_eval_dcs_return      psmsfsParser->eval_dcs(psmsfsParser)
 *  - smsfsParser_smpp_eval_dcs_return      psmsfsParser->smpp_eval_dcs(psmsfsParser)
 *  - smsfsParser_smpp_eval_esm_mm_return      psmsfsParser->smpp_eval_esm_mm(psmsfsParser)
 *  - smsfsParser_smpp_eval_esm_mt_return      psmsfsParser->smpp_eval_esm_mt(psmsfsParser)
 *  - smsfsParser_smpp_eval_esm_gf_return      psmsfsParser->smpp_eval_esm_gf(psmsfsParser)
 *  - smsfsParser_smpp_eval_rd_smscdr_return      psmsfsParser->smpp_eval_rd_smscdr(psmsfsParser)
 *  - smsfsParser_smpp_eval_rd_smeoa_return      psmsfsParser->smpp_eval_rd_smeoa(psmsfsParser)
 *  - smsfsParser_smpp_eval_rd_in_return      psmsfsParser->smpp_eval_rd_in(psmsfsParser)
 *  - smsfsParser_eval_string_return      psmsfsParser->eval_string(psmsfsParser)
 *  - smsfsParser_eval_number_return      psmsfsParser->eval_number(psmsfsParser)
 *  - smsfsParser_eval_ton_return      psmsfsParser->eval_ton(psmsfsParser)
 *  - smsfsParser_smpp_eval_ton_return      psmsfsParser->smpp_eval_ton(psmsfsParser)
 *  - smsfsParser_eval_msg_type_return      psmsfsParser->eval_msg_type(psmsfsParser)
 *  - smsfsParser_evalsimple_return      psmsfsParser->evalsimple(psmsfsParser)
 *  - smsfsParser_listmethod_return      psmsfsParser->listmethod(psmsfsParser)
 *  - smsfsParser_floodmethod_return      psmsfsParser->floodmethod(psmsfsParser)
 *  - smsfsParser_regexdef_return      psmsfsParser->regexdef(psmsfsParser)
 *  - smsfsParser_regex_return      psmsfsParser->regex(psmsfsParser)
 *  - smsfsParser_smpp_esm_mm_return      psmsfsParser->smpp_esm_mm(psmsfsParser)
 *  - smsfsParser_smpp_esm_mt_return      psmsfsParser->smpp_esm_mt(psmsfsParser)
 *  - smsfsParser_smpp_esm_gf_return      psmsfsParser->smpp_esm_gf(psmsfsParser)
 *  - smsfsParser_smpp_rd_smscdr_return      psmsfsParser->smpp_rd_smscdr(psmsfsParser)
 *  - smsfsParser_smpp_rd_smeoa_return      psmsfsParser->smpp_rd_smeoa(psmsfsParser)
 *  - smsfsParser_smpp_rd_in_return      psmsfsParser->smpp_rd_in(psmsfsParser)
 *  - smsfsParser_nai_return      psmsfsParser->nai(psmsfsParser)
 *  - smsfsParser_np_return      psmsfsParser->np(psmsfsParser)
 *  - smsfsParser_smpp_np_return      psmsfsParser->smpp_np(psmsfsParser)
 *  - smsfsParser_gti_return      psmsfsParser->gti(psmsfsParser)
 *  - smsfsParser_smpp_dcs_return      psmsfsParser->smpp_dcs(psmsfsParser)
 *  - smsfsParser_dcs_return      psmsfsParser->dcs(psmsfsParser)
 *  - smsfsParser_smpp_typeofnum_return      psmsfsParser->smpp_typeofnum(psmsfsParser)
 *  - smsfsParser_typeofnum_return      psmsfsParser->typeofnum(psmsfsParser)
 *  - smsfsParser_msgtype_return      psmsfsParser->msgtype(psmsfsParser)
 *  - smsfsParser_evalobj_return      psmsfsParser->evalobj(psmsfsParser)
 *  - smsfsParser_eval_return      psmsfsParser->eval(psmsfsParser)
 *  - smsfsParser_curlyblock_return      psmsfsParser->curlyblock(psmsfsParser)
 *  - smsfsParser_m3ua_return      psmsfsParser->m3ua(psmsfsParser)
 *  - smsfsParser_modifier_method_return      psmsfsParser->modifier_method(psmsfsParser)
 *  - smsfsParser_modify_return      psmsfsParser->modify(psmsfsParser)
 *  - smsfsParser_modifybody_return      psmsfsParser->modifybody(psmsfsParser)
 *  - smsfsParser_ruleeval_return      psmsfsParser->ruleeval(psmsfsParser)
 *  - smsfsParser_rulealw_return      psmsfsParser->rulealw(psmsfsParser)
 *  - smsfsParser_ruledny_return      psmsfsParser->ruledny(psmsfsParser)
 *  - smsfsParser_rulebody_return      psmsfsParser->rulebody(psmsfsParser)
 *  - smsfsParser_rule_return      psmsfsParser->rule(psmsfsParser)
 *  - smsfsParser_filter_return      psmsfsParser->filter(psmsfsParser)
 *  - smsfsParser_comparison_return      psmsfsParser->comparison(psmsfsParser)
 *  - smsfsParser_action_return      psmsfsParser->action(psmsfsParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_smsfsParser_H
#define _smsfsParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct smsfsParser_Ctx_struct smsfsParser, * psmsfsParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct smsfsParser_input_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_input_return;

typedef struct smsfsParser_eval_nai_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_eval_nai_return;

typedef struct smsfsParser_smpp_eval_np_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_smpp_eval_np_return;

typedef struct smsfsParser_eval_np_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_eval_np_return;

typedef struct smsfsParser_eval_gti_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_eval_gti_return;

typedef struct smsfsParser_eval_dcs_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_eval_dcs_return;

typedef struct smsfsParser_smpp_eval_dcs_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_smpp_eval_dcs_return;

typedef struct smsfsParser_smpp_eval_esm_mm_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_smpp_eval_esm_mm_return;

typedef struct smsfsParser_smpp_eval_esm_mt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_smpp_eval_esm_mt_return;

typedef struct smsfsParser_smpp_eval_esm_gf_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_smpp_eval_esm_gf_return;

typedef struct smsfsParser_smpp_eval_rd_smscdr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_smpp_eval_rd_smscdr_return;

typedef struct smsfsParser_smpp_eval_rd_smeoa_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_smpp_eval_rd_smeoa_return;

typedef struct smsfsParser_smpp_eval_rd_in_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_smpp_eval_rd_in_return;

typedef struct smsfsParser_eval_string_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_eval_string_return;

typedef struct smsfsParser_eval_number_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_eval_number_return;

typedef struct smsfsParser_eval_ton_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_eval_ton_return;

typedef struct smsfsParser_smpp_eval_ton_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_smpp_eval_ton_return;

typedef struct smsfsParser_eval_msg_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_eval_msg_type_return;

typedef struct smsfsParser_evalsimple_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_evalsimple_return;

typedef struct smsfsParser_listmethod_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_listmethod_return;

typedef struct smsfsParser_floodmethod_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_floodmethod_return;

typedef struct smsfsParser_regexdef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
    pANTLR3_STRING regexdef_res;
}
    smsfsParser_regexdef_return;

typedef struct smsfsParser_regex_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_regex_return;

typedef struct smsfsParser_smpp_esm_mm_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_smpp_esm_mm_return;

typedef struct smsfsParser_smpp_esm_mt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_smpp_esm_mt_return;

typedef struct smsfsParser_smpp_esm_gf_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_smpp_esm_gf_return;

typedef struct smsfsParser_smpp_rd_smscdr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_smpp_rd_smscdr_return;

typedef struct smsfsParser_smpp_rd_smeoa_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_smpp_rd_smeoa_return;

typedef struct smsfsParser_smpp_rd_in_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_smpp_rd_in_return;

typedef struct smsfsParser_nai_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_nai_return;

typedef struct smsfsParser_np_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_np_return;

typedef struct smsfsParser_smpp_np_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_smpp_np_return;

typedef struct smsfsParser_gti_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_gti_return;

typedef struct smsfsParser_smpp_dcs_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_smpp_dcs_return;

typedef struct smsfsParser_dcs_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_dcs_return;

typedef struct smsfsParser_smpp_typeofnum_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_smpp_typeofnum_return;

typedef struct smsfsParser_typeofnum_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_typeofnum_return;

typedef struct smsfsParser_msgtype_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_msgtype_return;

typedef struct smsfsParser_evalobj_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_evalobj_return;

typedef struct smsfsParser_eval_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_eval_return;

typedef struct smsfsParser_curlyblock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_curlyblock_return;

typedef struct smsfsParser_m3ua_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_m3ua_return;

typedef struct smsfsParser_modifier_method_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_modifier_method_return;

typedef struct smsfsParser_modify_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_modify_return;

typedef struct smsfsParser_modifybody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_modifybody_return;

typedef struct smsfsParser_ruleeval_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_ruleeval_return;

typedef struct smsfsParser_rulealw_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_rulealw_return;

typedef struct smsfsParser_ruledny_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_ruledny_return;

typedef struct smsfsParser_rulebody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_rulebody_return;

typedef struct smsfsParser_rule_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_rule_return;

typedef struct smsfsParser_filter_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_filter_return;

typedef struct smsfsParser_comparison_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_comparison_return;

typedef struct smsfsParser_action_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    smsfsParser_action_return;



/** Context tracking structure for smsfsParser
 */
struct smsfsParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     smsfsParser_input_return (*input)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_eval_nai_return (*eval_nai)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_smpp_eval_np_return (*smpp_eval_np)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_eval_np_return (*eval_np)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_eval_gti_return (*eval_gti)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_eval_dcs_return (*eval_dcs)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_smpp_eval_dcs_return (*smpp_eval_dcs)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_smpp_eval_esm_mm_return (*smpp_eval_esm_mm)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_smpp_eval_esm_mt_return (*smpp_eval_esm_mt)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_smpp_eval_esm_gf_return (*smpp_eval_esm_gf)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_smpp_eval_rd_smscdr_return (*smpp_eval_rd_smscdr)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_smpp_eval_rd_smeoa_return (*smpp_eval_rd_smeoa)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_smpp_eval_rd_in_return (*smpp_eval_rd_in)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_eval_string_return (*eval_string)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_eval_number_return (*eval_number)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_eval_ton_return (*eval_ton)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_smpp_eval_ton_return (*smpp_eval_ton)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_eval_msg_type_return (*eval_msg_type)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_evalsimple_return (*evalsimple)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_listmethod_return (*listmethod)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_floodmethod_return (*floodmethod)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_regexdef_return (*regexdef)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_regex_return (*regex)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_smpp_esm_mm_return (*smpp_esm_mm)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_smpp_esm_mt_return (*smpp_esm_mt)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_smpp_esm_gf_return (*smpp_esm_gf)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_smpp_rd_smscdr_return (*smpp_rd_smscdr)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_smpp_rd_smeoa_return (*smpp_rd_smeoa)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_smpp_rd_in_return (*smpp_rd_in)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_nai_return (*nai)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_np_return (*np)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_smpp_np_return (*smpp_np)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_gti_return (*gti)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_smpp_dcs_return (*smpp_dcs)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_dcs_return (*dcs)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_smpp_typeofnum_return (*smpp_typeofnum)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_typeofnum_return (*typeofnum)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_msgtype_return (*msgtype)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_evalobj_return (*evalobj)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_eval_return (*eval)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_curlyblock_return (*curlyblock)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_m3ua_return (*m3ua)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_modifier_method_return (*modifier_method)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_modify_return (*modify)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_modifybody_return (*modifybody)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_ruleeval_return (*ruleeval)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_rulealw_return (*rulealw)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_ruledny_return (*ruledny)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_rulebody_return (*rulebody)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_rule_return (*rule)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_filter_return (*filter)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_comparison_return (*comparison)	(struct smsfsParser_Ctx_struct * ctx);
     smsfsParser_action_return (*action)	(struct smsfsParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct smsfsParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API psmsfsParser smsfsParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API psmsfsParser smsfsParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define SMPP_RD_IN_YES      72
#define HEX_P      206
#define T__259      259
#define REMOTE_IP      241
#define T__258      258
#define T__257      257
#define MAP_MSISDN      99
#define SMS_TPDU_ORIGINATING_ENC      103
#define DQUOTE      216
#define T__260      260
#define T__261      261
#define ALW_Q      179
#define SMPP_DELIVERY_TIME      26
#define R_CR_B      189
#define EOF      -1
#define GTI_NONE      143
#define HLR_RESULT_NNN      114
#define SMPP_RD_SMEOA_NO      67
#define F_SMPP_MO      191
#define SPAM_REMOVE_LST      154
#define SMPP_NP_PRIVATE      60
#define OFF      197
#define FLOOD_ALL_MAX      167
#define SCCP_GT_CALLED_GTI      94
#define SCCP_GT_CALLED_NP      92
#define NP_MARITIME      134
#define FLOOD_GLOBAL      165
#define NP_ISDN_TELEPHONE      130
#define GOTO      217
#define F_SMPP_MT      193
#define TON_NETWORK_SPECIFIC      125
#define SMPP_DATA_CODING      32
#define LOCAL_PORT      240
#define SMPP_TCP_DESTINATION      11
#define M3UA_OPC      101
#define NP_GENERIC      131
#define SMPP_ESM_MESSAGE_TYPE      22
#define SMPP_RD_INTERMEDIATE_NOTIFICATION      30
#define SMPP_NP_WAP_CLIENT_ID      63
#define GTI_NAI      144
#define MD5_REMOVE_LST      158
#define MD5_SMS_TPDU_UD      119
#define WS      248
#define M3UA_CONNECTION      237
#define DCS_UCS2      150
#define ESCAPESEQUENCE      256
#define CONN_N_APP      245
#define FLOOD_ALL      171
#define RULE_EVAL      222
#define SMPP_DC_IA5_ASCII      74
#define MSG_TYPE_SINGLE      151
#define SL_COMMENT      254
#define LESS_THAN      207
#define DCS_8BIT      149
#define QUARANTINE_SMS_TPDU_UD      118
#define GT      208
#define SMPP_RD_IN_NO      71
#define SMPP_TON_ALPHANUMERIC      52
#define DNY_Q      183
#define SMPP_ESM_GF_UDHI_INDICATOR      44
#define HLR_REQUEST      159
#define STMTSEP      204
#define NP_ISDN_MOBILE      136
#define MD5_UPDATE_LST      157
#define MODIFY      214
#define DUMMY_RULE_DEF      231
#define SMPP_SERVICE_TYPE      14
#define SMPP_ESM_MT_MANUAL_USER_ACK      42
#define HLR_IMSI      108
#define SMPP_DC_KS_C_5601      85
#define SMPP_ESM_GF_NO      43
#define NP_TELEX      133
#define F_MO      190
#define NAI_INTERNATIONAL      142
#define NAI_NATIONAL_SIGNIFICANT_NUMBER      141
#define MODIFIER_STATUS      234
#define SMPP_ESM_MESSAGE_MODE      21
#define SMPP_ESM_GSM_FEATURES      23
#define SMPP_DC_JIS      78
#define TON_UNKNOWN      122
#define RULE_REGEX      225
#define ASTERISK      219
#define HLR_RESULT_ANNN      115
#define RULE_STATUS      223
#define SMS_TPDU_ORIGINATING      102
#define TON_SUBSCRIBER_NUMBER      126
#define NP_PRIVATE      137
#define SMPP_ORIGINATOR_NP      16
#define L_SQ_B      187
#define SMPP_ESM_MT_DEFAULT      40
#define SMPP_TON_SUBSCRIBER_NUMBER      51
#define RP_SMS_TPDU_UD      117
#define NAI_SUBSCRIBER_NUMBER      139
#define NAI_RESERVED_FOR_NATIONAL_USE      140
#define SMPP_RD_SMEOA_MANUAL_USER_ACK      69
#define RULE_EVAL_ATOM      224
#define PLUS      211
#define SMPP_TON_NATIONAL      49
#define SMPP_NP_NATIONAL      59
#define SCCP_GT_CALLED_ADDRESS      86
#define GTI_TTNPENOA      147
#define SMPP_DC_DEFAULT      73
#define SMPP_IP_DESTINATION      9
#define SMPP_ESM_MT_DELIVERY_ACK      41
#define SMPP_DC_8BIT_BINARY_1      75
#define F_HLR      194
#define SMPP_DC_8BIT_BINARY_2      77
#define FLOOD_GLOBAL_MAX      166
#define SQUOTE      215
#define MINUS      212
#define SCCP_GT_CALLING_ADDRESS      87
#define NP_LAND_MOBILE      135
#define CONNECTION_LABEL      238
#define SMS_TPDU_UD      106
#define COLON      203
#define MAP_SCOA_WL      6
#define SCCP_GT_CALLED_TT      88
#define DECIMAL      255
#define RULE_EVAL_TRUE      227
#define QUARANTINE_UPDATE_LST      155
#define STRINGLITERAL      249
#define SMPP_IP_SOURCE      8
#define SCCP_GT_CALLING_GTI      95
#define TON_ABBREVIATED      128
#define RULE_REGEX_EXPR      226
#define SPAM_SMS_TPDU_UD      116
#define CONN_DPC      243
#define RULE_DEF      230
#define F_MT      192
#define QUARANTINE_REMOVE_LST      156
#define MAP_IMSI      98
#define SMPP_DC_ISO_8859_5      79
#define SMPP_RD_SMSCDR_SUCCESS_FAILURE      65
#define FLOOD_DAY      170
#define SMPP_DC_ISO_8859_1      76
#define CONT_Q      177
#define SMS_TPDU_DESTINATION_ENC      105
#define MODIFIER_METHOD      235
#define SMPP_SYSTEM_ID      12
#define SMPP_ESM_MM_FORWARD      38
#define DICT_SMS_TPDU_UD      107
#define SMPP_RD_SMSCDR_NO      64
#define MAP_SCDA      97
#define HLR_NNN      110
#define MODIFIER      233
#define SMPP_DC_ISO_8859_8      80
#define SMPP_RD_SMEOA_BOTH      70
#define SMPP_VALIDITY_PERIOD      27
#define DCS_DEFAULT      148
#define WORD      251
#define SMPP_RD_SMEOA_ACK      68
#define HLR_ANNN      111
#define SMPP_ESM_GF_SET_REPLY_PATH      45
#define SCCP_GT_CALLED_WL      4
#define SMPP_TON_ABBREVIATED      53
#define ALWU_Q      181
#define SMPP_DC_EXTENDED_KANJI      84
#define SMPP_PROTOCOL_ID      24
#define L_PAREN      184
#define NP_UNKNOWN      129
#define NP_DATA_X121      132
#define HLR_SCA      112
#define SMPP_NP_TELEX      57
#define SMPP_ESM_MM_DEFAULT      36
#define SMPP_NP_UNKNOWN      54
#define NEQUAL      202
#define SMPP_REPLACE_IF_PRESENT      31
#define RULE      173
#define SCCP_GT_CALLING_NAI      91
#define ON      196
#define SMPP_TON_INTERNATIONAL      48
#define SMPP_RD_SME_ACK      29
#define LOCAL_IP      239
#define TON_INTERNATIONAL      123
#define SMS_TPDU_DCS      120
#define SMPP_RECIPIENT_TON      18
#define SMPP_SM_DEFAULT_MSG_ID      33
#define LIST      172
#define RULE_EVAL_FALSE      228
#define NAI_UNKNOWN      138
#define SMPP_NP_ERMES      61
#define SMPP_RECIPIENT_ADDRESS      20
#define SMS_TPDU_DESTINATION      104
#define FLOOD      163
#define NOT_IN      175
#define R_SQ_B      186
#define FILTER_NODE      221
#define OR      201
#define M3UA_DPC      100
#define SMPP_NP_LAND_MOBILE      58
#define NO_DR      160
#define MSG_TYPE_CONCATENATED      152
#define SMPP_NP_DATA_X121      56
#define SCCP_GT_CALLING_NP      93
#define HLR_MSISDN      109
#define CONVERT_SMPP      162
#define DIGITS      250
#define REMOTE_PORT      242
#define REGEX_BLOCK      218
#define GTE      210
#define ALWU      180
#define L_CR_B      188
#define SCCP_GT_CALLED_NAI      90
#define SMPP_DC_PICTOGRAM      82
#define SMPP_PASSWORD      13
#define F_M3UA      195
#define AND      213
#define SMPP_DC_ISO_2011_JP      83
#define SMPP_SM      35
#define LTE      209
#define ANNT      198
#define DNY      182
#define SCCP_GT_CALLING_WL      5
#define ALW      178
#define ML_COMMENT      253
#define FLOOD_MINUTE      169
#define GTI_TT      145
#define IN      174
#define IP      252
#define SMPP_TON_UNKNOWN      47
#define SMPP_ORIGINATOR_TON      15
#define COMMA      220
#define SMPP_ESM_MM_STORE_FORWARD      39
#define EQUAL      199
#define SMPP_NP_INTERNET_IP      62
#define HLR_RESULT_IMSI      113
#define SMS_MSG_TYPE      121
#define CONN_SC      247
#define SMPP_NP_ISDN_TELEPHONE      55
#define SMPP_PRIORITY_FLAG      25
#define TON_ALPHANUMERIC      127
#define GTI_TTNPE      146
#define PERCENT      205
#define SMPP_ORIGINATOR_ADDRESS      17
#define MAP_SCOA      96
#define CONVERT_SS7      161
#define SCCP_GT_CALLING_TT      89
#define SMPP_RECIPIENT_NP      19
#define CONN_RC      246
#define TON_NATIONAL      124
#define SMPP_TCP_SOURCE      10
#define FLOOD_MAX      164
#define R_PAREN      185
#define SMPP_ESM_MM_DATAGRAM      37
#define MAP_SCDA_WL      7
#define SPAM_UPDATE_LST      153
#define RULE_EVAL_POINTS      229
#define CONT      176
#define SMPP_RD_SMSCDR_FAILURE      66
#define SMPP_SM_LENGTH      34
#define SMPP_DC_UCS2      81
#define ASSIGN      200
#define SMPP_RD_SMSC_RECEIPT      28
#define FLOOD_HOUR      168
#define CONN_OPC      244
#define MODIFIER_LABEL      236
#define RULE_LABEL      232
#define SMPP_ESM_GF_SET_BOTH      46
#define SMPP_TON_NETWORK_SPECIFIC      50
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for smsfsParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
