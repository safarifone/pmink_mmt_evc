/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : /home/dfranusic/antlr-c-test/smsfs.g
 *     -                            On : 2012-01-30 19:07:16
 *     -                 for the lexer : smsfsLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer smsfsLexer has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef psmsfsLexer, which is returned from a call to smsfsLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 * * The methods in psmsfsLexer are  as follows:
 *
 *  -  void      psmsfsLexer->SCCP_GT_CALLED_WL(psmsfsLexer)
 *  -  void      psmsfsLexer->SCCP_GT_CALLING_WL(psmsfsLexer)
 *  -  void      psmsfsLexer->MAP_SCOA_WL(psmsfsLexer)
 *  -  void      psmsfsLexer->MAP_SCDA_WL(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_IP_SOURCE(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_IP_DESTINATION(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_TCP_SOURCE(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_TCP_DESTINATION(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_SYSTEM_ID(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_PASSWORD(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_SERVICE_TYPE(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_ORIGINATOR_TON(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_ORIGINATOR_NP(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_ORIGINATOR_ADDRESS(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_RECIPIENT_TON(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_RECIPIENT_NP(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_RECIPIENT_ADDRESS(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_ESM_MESSAGE_MODE(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_ESM_MESSAGE_TYPE(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_ESM_GSM_FEATURES(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_PROTOCOL_ID(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_PRIORITY_FLAG(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_DELIVERY_TIME(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_VALIDITY_PERIOD(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_RD_SMSC_RECEIPT(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_RD_SME_ACK(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_RD_INTERMEDIATE_NOTIFICATION(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_REPLACE_IF_PRESENT(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_DATA_CODING(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_SM_DEFAULT_MSG_ID(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_SM_LENGTH(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_SM(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_ESM_MM_DEFAULT(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_ESM_MM_DATAGRAM(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_ESM_MM_FORWARD(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_ESM_MM_STORE_FORWARD(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_ESM_MT_DEFAULT(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_ESM_MT_DELIVERY_ACK(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_ESM_MT_MANUAL_USER_ACK(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_ESM_GF_NO(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_ESM_GF_UDHI_INDICATOR(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_ESM_GF_SET_REPLY_PATH(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_ESM_GF_SET_BOTH(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_TON_UNKNOWN(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_TON_INTERNATIONAL(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_TON_NATIONAL(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_TON_NETWORK_SPECIFIC(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_TON_SUBSCRIBER_NUMBER(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_TON_ALPHANUMERIC(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_TON_ABBREVIATED(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_NP_UNKNOWN(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_NP_ISDN_TELEPHONE(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_NP_DATA_X121(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_NP_TELEX(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_NP_LAND_MOBILE(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_NP_NATIONAL(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_NP_PRIVATE(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_NP_ERMES(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_NP_INTERNET_IP(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_NP_WAP_CLIENT_ID(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_RD_SMSCDR_NO(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_RD_SMSCDR_SUCCESS_FAILURE(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_RD_SMSCDR_FAILURE(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_RD_SMEOA_NO(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_RD_SMEOA_ACK(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_RD_SMEOA_MANUAL_USER_ACK(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_RD_SMEOA_BOTH(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_RD_IN_NO(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_RD_IN_YES(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_DC_DEFAULT(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_DC_IA5_ASCII(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_DC_8BIT_BINARY_1(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_DC_ISO_8859_1(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_DC_8BIT_BINARY_2(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_DC_JIS(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_DC_ISO_8859_5(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_DC_ISO_8859_8(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_DC_UCS2(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_DC_PICTOGRAM(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_DC_ISO_2011_JP(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_DC_EXTENDED_KANJI(psmsfsLexer)
 *  -  void      psmsfsLexer->SMPP_DC_KS_C_5601(psmsfsLexer)
 *  -  void      psmsfsLexer->SCCP_GT_CALLED_ADDRESS(psmsfsLexer)
 *  -  void      psmsfsLexer->SCCP_GT_CALLING_ADDRESS(psmsfsLexer)
 *  -  void      psmsfsLexer->SCCP_GT_CALLED_TT(psmsfsLexer)
 *  -  void      psmsfsLexer->SCCP_GT_CALLING_TT(psmsfsLexer)
 *  -  void      psmsfsLexer->SCCP_GT_CALLED_NAI(psmsfsLexer)
 *  -  void      psmsfsLexer->SCCP_GT_CALLING_NAI(psmsfsLexer)
 *  -  void      psmsfsLexer->SCCP_GT_CALLED_NP(psmsfsLexer)
 *  -  void      psmsfsLexer->SCCP_GT_CALLING_NP(psmsfsLexer)
 *  -  void      psmsfsLexer->SCCP_GT_CALLED_GTI(psmsfsLexer)
 *  -  void      psmsfsLexer->SCCP_GT_CALLING_GTI(psmsfsLexer)
 *  -  void      psmsfsLexer->MAP_SCOA(psmsfsLexer)
 *  -  void      psmsfsLexer->MAP_SCDA(psmsfsLexer)
 *  -  void      psmsfsLexer->MAP_IMSI(psmsfsLexer)
 *  -  void      psmsfsLexer->MAP_MSISDN(psmsfsLexer)
 *  -  void      psmsfsLexer->M3UA_DPC(psmsfsLexer)
 *  -  void      psmsfsLexer->M3UA_OPC(psmsfsLexer)
 *  -  void      psmsfsLexer->SMS_TPDU_ORIGINATING(psmsfsLexer)
 *  -  void      psmsfsLexer->SMS_TPDU_ORIGINATING_ENC(psmsfsLexer)
 *  -  void      psmsfsLexer->SMS_TPDU_DESTINATION(psmsfsLexer)
 *  -  void      psmsfsLexer->SMS_TPDU_DESTINATION_ENC(psmsfsLexer)
 *  -  void      psmsfsLexer->SMS_TPDU_UD(psmsfsLexer)
 *  -  void      psmsfsLexer->DICT_SMS_TPDU_UD(psmsfsLexer)
 *  -  void      psmsfsLexer->HLR_IMSI(psmsfsLexer)
 *  -  void      psmsfsLexer->HLR_MSISDN(psmsfsLexer)
 *  -  void      psmsfsLexer->HLR_NNN(psmsfsLexer)
 *  -  void      psmsfsLexer->HLR_ANNN(psmsfsLexer)
 *  -  void      psmsfsLexer->HLR_SCA(psmsfsLexer)
 *  -  void      psmsfsLexer->HLR_RESULT_IMSI(psmsfsLexer)
 *  -  void      psmsfsLexer->HLR_RESULT_NNN(psmsfsLexer)
 *  -  void      psmsfsLexer->HLR_RESULT_ANNN(psmsfsLexer)
 *  -  void      psmsfsLexer->SPAM_SMS_TPDU_UD(psmsfsLexer)
 *  -  void      psmsfsLexer->RP_SMS_TPDU_UD(psmsfsLexer)
 *  -  void      psmsfsLexer->QUARANTINE_SMS_TPDU_UD(psmsfsLexer)
 *  -  void      psmsfsLexer->MD5_SMS_TPDU_UD(psmsfsLexer)
 *  -  void      psmsfsLexer->SMS_TPDU_DCS(psmsfsLexer)
 *  -  void      psmsfsLexer->SMS_MSG_TYPE(psmsfsLexer)
 *  -  void      psmsfsLexer->TON_UNKNOWN(psmsfsLexer)
 *  -  void      psmsfsLexer->TON_INTERNATIONAL(psmsfsLexer)
 *  -  void      psmsfsLexer->TON_NATIONAL(psmsfsLexer)
 *  -  void      psmsfsLexer->TON_NETWORK_SPECIFIC(psmsfsLexer)
 *  -  void      psmsfsLexer->TON_SUBSCRIBER_NUMBER(psmsfsLexer)
 *  -  void      psmsfsLexer->TON_ALPHANUMERIC(psmsfsLexer)
 *  -  void      psmsfsLexer->TON_ABBREVIATED(psmsfsLexer)
 *  -  void      psmsfsLexer->NP_UNKNOWN(psmsfsLexer)
 *  -  void      psmsfsLexer->NP_ISDN_TELEPHONE(psmsfsLexer)
 *  -  void      psmsfsLexer->NP_GENERIC(psmsfsLexer)
 *  -  void      psmsfsLexer->NP_DATA_X121(psmsfsLexer)
 *  -  void      psmsfsLexer->NP_TELEX(psmsfsLexer)
 *  -  void      psmsfsLexer->NP_MARITIME(psmsfsLexer)
 *  -  void      psmsfsLexer->NP_LAND_MOBILE(psmsfsLexer)
 *  -  void      psmsfsLexer->NP_ISDN_MOBILE(psmsfsLexer)
 *  -  void      psmsfsLexer->NP_PRIVATE(psmsfsLexer)
 *  -  void      psmsfsLexer->NAI_UNKNOWN(psmsfsLexer)
 *  -  void      psmsfsLexer->NAI_SUBSCRIBER_NUMBER(psmsfsLexer)
 *  -  void      psmsfsLexer->NAI_RESERVED_FOR_NATIONAL_USE(psmsfsLexer)
 *  -  void      psmsfsLexer->NAI_NATIONAL_SIGNIFICANT_NUMBER(psmsfsLexer)
 *  -  void      psmsfsLexer->NAI_INTERNATIONAL(psmsfsLexer)
 *  -  void      psmsfsLexer->GTI_NONE(psmsfsLexer)
 *  -  void      psmsfsLexer->GTI_NAI(psmsfsLexer)
 *  -  void      psmsfsLexer->GTI_TT(psmsfsLexer)
 *  -  void      psmsfsLexer->GTI_TTNPE(psmsfsLexer)
 *  -  void      psmsfsLexer->GTI_TTNPENOA(psmsfsLexer)
 *  -  void      psmsfsLexer->DCS_DEFAULT(psmsfsLexer)
 *  -  void      psmsfsLexer->DCS_8BIT(psmsfsLexer)
 *  -  void      psmsfsLexer->DCS_UCS2(psmsfsLexer)
 *  -  void      psmsfsLexer->MSG_TYPE_SINGLE(psmsfsLexer)
 *  -  void      psmsfsLexer->MSG_TYPE_CONCATENATED(psmsfsLexer)
 *  -  void      psmsfsLexer->SPAM_UPDATE_LST(psmsfsLexer)
 *  -  void      psmsfsLexer->SPAM_REMOVE_LST(psmsfsLexer)
 *  -  void      psmsfsLexer->QUARANTINE_UPDATE_LST(psmsfsLexer)
 *  -  void      psmsfsLexer->QUARANTINE_REMOVE_LST(psmsfsLexer)
 *  -  void      psmsfsLexer->MD5_UPDATE_LST(psmsfsLexer)
 *  -  void      psmsfsLexer->MD5_REMOVE_LST(psmsfsLexer)
 *  -  void      psmsfsLexer->HLR_REQUEST(psmsfsLexer)
 *  -  void      psmsfsLexer->NO_DR(psmsfsLexer)
 *  -  void      psmsfsLexer->CONVERT_SS7(psmsfsLexer)
 *  -  void      psmsfsLexer->CONVERT_SMPP(psmsfsLexer)
 *  -  void      psmsfsLexer->FLOOD(psmsfsLexer)
 *  -  void      psmsfsLexer->FLOOD_MAX(psmsfsLexer)
 *  -  void      psmsfsLexer->FLOOD_GLOBAL(psmsfsLexer)
 *  -  void      psmsfsLexer->FLOOD_GLOBAL_MAX(psmsfsLexer)
 *  -  void      psmsfsLexer->FLOOD_ALL_MAX(psmsfsLexer)
 *  -  void      psmsfsLexer->FLOOD_HOUR(psmsfsLexer)
 *  -  void      psmsfsLexer->FLOOD_MINUTE(psmsfsLexer)
 *  -  void      psmsfsLexer->FLOOD_DAY(psmsfsLexer)
 *  -  void      psmsfsLexer->FLOOD_ALL(psmsfsLexer)
 *  -  void      psmsfsLexer->LIST(psmsfsLexer)
 *  -  void      psmsfsLexer->RULE(psmsfsLexer)
 *  -  void      psmsfsLexer->IN(psmsfsLexer)
 *  -  void      psmsfsLexer->NOT_IN(psmsfsLexer)
 *  -  void      psmsfsLexer->CONT(psmsfsLexer)
 *  -  void      psmsfsLexer->CONT_Q(psmsfsLexer)
 *  -  void      psmsfsLexer->ALW(psmsfsLexer)
 *  -  void      psmsfsLexer->ALW_Q(psmsfsLexer)
 *  -  void      psmsfsLexer->ALWU(psmsfsLexer)
 *  -  void      psmsfsLexer->ALWU_Q(psmsfsLexer)
 *  -  void      psmsfsLexer->DNY(psmsfsLexer)
 *  -  void      psmsfsLexer->DNY_Q(psmsfsLexer)
 *  -  void      psmsfsLexer->L_PAREN(psmsfsLexer)
 *  -  void      psmsfsLexer->R_PAREN(psmsfsLexer)
 *  -  void      psmsfsLexer->R_SQ_B(psmsfsLexer)
 *  -  void      psmsfsLexer->L_SQ_B(psmsfsLexer)
 *  -  void      psmsfsLexer->L_CR_B(psmsfsLexer)
 *  -  void      psmsfsLexer->R_CR_B(psmsfsLexer)
 *  -  void      psmsfsLexer->F_MO(psmsfsLexer)
 *  -  void      psmsfsLexer->F_SMPP_MO(psmsfsLexer)
 *  -  void      psmsfsLexer->F_MT(psmsfsLexer)
 *  -  void      psmsfsLexer->F_SMPP_MT(psmsfsLexer)
 *  -  void      psmsfsLexer->F_HLR(psmsfsLexer)
 *  -  void      psmsfsLexer->F_M3UA(psmsfsLexer)
 *  -  void      psmsfsLexer->ON(psmsfsLexer)
 *  -  void      psmsfsLexer->OFF(psmsfsLexer)
 *  -  void      psmsfsLexer->ANNT(psmsfsLexer)
 *  -  void      psmsfsLexer->EQUAL(psmsfsLexer)
 *  -  void      psmsfsLexer->ASSIGN(psmsfsLexer)
 *  -  void      psmsfsLexer->OR(psmsfsLexer)
 *  -  void      psmsfsLexer->NEQUAL(psmsfsLexer)
 *  -  void      psmsfsLexer->COLON(psmsfsLexer)
 *  -  void      psmsfsLexer->STMTSEP(psmsfsLexer)
 *  -  void      psmsfsLexer->PERCENT(psmsfsLexer)
 *  -  void      psmsfsLexer->HEX_P(psmsfsLexer)
 *  -  void      psmsfsLexer->LESS_THAN(psmsfsLexer)
 *  -  void      psmsfsLexer->GT(psmsfsLexer)
 *  -  void      psmsfsLexer->LTE(psmsfsLexer)
 *  -  void      psmsfsLexer->GTE(psmsfsLexer)
 *  -  void      psmsfsLexer->PLUS(psmsfsLexer)
 *  -  void      psmsfsLexer->MINUS(psmsfsLexer)
 *  -  void      psmsfsLexer->AND(psmsfsLexer)
 *  -  void      psmsfsLexer->MODIFY(psmsfsLexer)
 *  -  void      psmsfsLexer->SQUOTE(psmsfsLexer)
 *  -  void      psmsfsLexer->DQUOTE(psmsfsLexer)
 *  -  void      psmsfsLexer->GOTO(psmsfsLexer)
 *  -  void      psmsfsLexer->REGEX_BLOCK(psmsfsLexer)
 *  -  void      psmsfsLexer->ASTERISK(psmsfsLexer)
 *  -  void      psmsfsLexer->COMMA(psmsfsLexer)
 *  -  void      psmsfsLexer->T__257(psmsfsLexer)
 *  -  void      psmsfsLexer->T__258(psmsfsLexer)
 *  -  void      psmsfsLexer->T__259(psmsfsLexer)
 *  -  void      psmsfsLexer->T__260(psmsfsLexer)
 *  -  void      psmsfsLexer->T__261(psmsfsLexer)
 *  -  void      psmsfsLexer->IP(psmsfsLexer)
 *  -  void      psmsfsLexer->ML_COMMENT(psmsfsLexer)
 *  -  void      psmsfsLexer->SL_COMMENT(psmsfsLexer)
 *  -  void      psmsfsLexer->DIGITS(psmsfsLexer)
 *  -  void      psmsfsLexer->DECIMAL(psmsfsLexer)
 *  -  void      psmsfsLexer->WORD(psmsfsLexer)
 *  -  void      psmsfsLexer->WS(psmsfsLexer)
 *  -  void      psmsfsLexer->STRINGLITERAL(psmsfsLexer)
 *  -  void      psmsfsLexer->ESCAPESEQUENCE(psmsfsLexer)
 *  -  void      psmsfsLexer->Tokens(psmsfsLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_smsfsLexer_H
#define _smsfsLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct smsfsLexer_Ctx_struct smsfsLexer, * psmsfsLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for smsfsLexer
 */
struct smsfsLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;


     void (*mSCCP_GT_CALLED_WL)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSCCP_GT_CALLING_WL)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mMAP_SCOA_WL)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mMAP_SCDA_WL)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_IP_SOURCE)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_IP_DESTINATION)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_TCP_SOURCE)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_TCP_DESTINATION)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_SYSTEM_ID)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_PASSWORD)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_SERVICE_TYPE)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_ORIGINATOR_TON)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_ORIGINATOR_NP)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_ORIGINATOR_ADDRESS)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_RECIPIENT_TON)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_RECIPIENT_NP)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_RECIPIENT_ADDRESS)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_ESM_MESSAGE_MODE)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_ESM_MESSAGE_TYPE)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_ESM_GSM_FEATURES)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_PROTOCOL_ID)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_PRIORITY_FLAG)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_DELIVERY_TIME)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_VALIDITY_PERIOD)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_RD_SMSC_RECEIPT)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_RD_SME_ACK)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_RD_INTERMEDIATE_NOTIFICATION)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_REPLACE_IF_PRESENT)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_DATA_CODING)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_SM_DEFAULT_MSG_ID)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_SM_LENGTH)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_SM)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_ESM_MM_DEFAULT)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_ESM_MM_DATAGRAM)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_ESM_MM_FORWARD)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_ESM_MM_STORE_FORWARD)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_ESM_MT_DEFAULT)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_ESM_MT_DELIVERY_ACK)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_ESM_MT_MANUAL_USER_ACK)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_ESM_GF_NO)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_ESM_GF_UDHI_INDICATOR)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_ESM_GF_SET_REPLY_PATH)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_ESM_GF_SET_BOTH)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_TON_UNKNOWN)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_TON_INTERNATIONAL)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_TON_NATIONAL)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_TON_NETWORK_SPECIFIC)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_TON_SUBSCRIBER_NUMBER)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_TON_ALPHANUMERIC)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_TON_ABBREVIATED)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_NP_UNKNOWN)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_NP_ISDN_TELEPHONE)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_NP_DATA_X121)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_NP_TELEX)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_NP_LAND_MOBILE)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_NP_NATIONAL)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_NP_PRIVATE)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_NP_ERMES)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_NP_INTERNET_IP)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_NP_WAP_CLIENT_ID)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_RD_SMSCDR_NO)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_RD_SMSCDR_SUCCESS_FAILURE)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_RD_SMSCDR_FAILURE)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_RD_SMEOA_NO)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_RD_SMEOA_ACK)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_RD_SMEOA_MANUAL_USER_ACK)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_RD_SMEOA_BOTH)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_RD_IN_NO)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_RD_IN_YES)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_DC_DEFAULT)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_DC_IA5_ASCII)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_DC_8BIT_BINARY_1)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_DC_ISO_8859_1)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_DC_8BIT_BINARY_2)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_DC_JIS)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_DC_ISO_8859_5)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_DC_ISO_8859_8)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_DC_UCS2)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_DC_PICTOGRAM)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_DC_ISO_2011_JP)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_DC_EXTENDED_KANJI)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMPP_DC_KS_C_5601)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSCCP_GT_CALLED_ADDRESS)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSCCP_GT_CALLING_ADDRESS)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSCCP_GT_CALLED_TT)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSCCP_GT_CALLING_TT)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSCCP_GT_CALLED_NAI)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSCCP_GT_CALLING_NAI)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSCCP_GT_CALLED_NP)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSCCP_GT_CALLING_NP)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSCCP_GT_CALLED_GTI)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSCCP_GT_CALLING_GTI)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mMAP_SCOA)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mMAP_SCDA)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mMAP_IMSI)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mMAP_MSISDN)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mM3UA_DPC)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mM3UA_OPC)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMS_TPDU_ORIGINATING)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMS_TPDU_ORIGINATING_ENC)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMS_TPDU_DESTINATION)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMS_TPDU_DESTINATION_ENC)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMS_TPDU_UD)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mDICT_SMS_TPDU_UD)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mHLR_IMSI)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mHLR_MSISDN)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mHLR_NNN)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mHLR_ANNN)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mHLR_SCA)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mHLR_RESULT_IMSI)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mHLR_RESULT_NNN)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mHLR_RESULT_ANNN)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSPAM_SMS_TPDU_UD)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mRP_SMS_TPDU_UD)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mQUARANTINE_SMS_TPDU_UD)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mMD5_SMS_TPDU_UD)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMS_TPDU_DCS)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSMS_MSG_TYPE)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mTON_UNKNOWN)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mTON_INTERNATIONAL)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mTON_NATIONAL)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mTON_NETWORK_SPECIFIC)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mTON_SUBSCRIBER_NUMBER)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mTON_ALPHANUMERIC)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mTON_ABBREVIATED)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mNP_UNKNOWN)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mNP_ISDN_TELEPHONE)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mNP_GENERIC)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mNP_DATA_X121)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mNP_TELEX)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mNP_MARITIME)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mNP_LAND_MOBILE)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mNP_ISDN_MOBILE)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mNP_PRIVATE)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mNAI_UNKNOWN)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mNAI_SUBSCRIBER_NUMBER)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mNAI_RESERVED_FOR_NATIONAL_USE)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mNAI_NATIONAL_SIGNIFICANT_NUMBER)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mNAI_INTERNATIONAL)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mGTI_NONE)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mGTI_NAI)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mGTI_TT)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mGTI_TTNPE)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mGTI_TTNPENOA)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mDCS_DEFAULT)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mDCS_8BIT)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mDCS_UCS2)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mMSG_TYPE_SINGLE)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mMSG_TYPE_CONCATENATED)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSPAM_UPDATE_LST)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSPAM_REMOVE_LST)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mQUARANTINE_UPDATE_LST)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mQUARANTINE_REMOVE_LST)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mMD5_UPDATE_LST)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mMD5_REMOVE_LST)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mHLR_REQUEST)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mNO_DR)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mCONVERT_SS7)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mCONVERT_SMPP)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mFLOOD)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mFLOOD_MAX)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mFLOOD_GLOBAL)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mFLOOD_GLOBAL_MAX)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mFLOOD_ALL_MAX)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mFLOOD_HOUR)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mFLOOD_MINUTE)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mFLOOD_DAY)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mFLOOD_ALL)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mLIST)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mRULE)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mIN)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mNOT_IN)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mCONT)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mCONT_Q)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mALW)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mALW_Q)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mALWU)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mALWU_Q)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mDNY)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mDNY_Q)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mL_PAREN)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mR_PAREN)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mR_SQ_B)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mL_SQ_B)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mL_CR_B)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mR_CR_B)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mF_MO)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mF_SMPP_MO)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mF_MT)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mF_SMPP_MT)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mF_HLR)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mF_M3UA)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mON)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mOFF)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mANNT)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mEQUAL)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mASSIGN)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mOR)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mNEQUAL)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mCOLON)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSTMTSEP)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mPERCENT)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mHEX_P)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mLESS_THAN)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mGT)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mLTE)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mGTE)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mPLUS)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mMINUS)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mAND)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mMODIFY)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSQUOTE)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mDQUOTE)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mGOTO)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mREGEX_BLOCK)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mASTERISK)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mCOMMA)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mT__257)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mT__258)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mT__259)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mT__260)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mT__261)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mIP)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mML_COMMENT)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSL_COMMENT)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mDIGITS)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mDECIMAL)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mWORD)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mWS)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mSTRINGLITERAL)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mESCAPESEQUENCE)	(struct smsfsLexer_Ctx_struct * ctx);
     void (*mTokens)	(struct smsfsLexer_Ctx_struct * ctx);    const char * (*getGrammarFileName)();
    void	    (*free)   (struct smsfsLexer_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API psmsfsLexer smsfsLexerNew         (pANTLR3_INPUT_STREAM instream);
ANTLR3_API psmsfsLexer smsfsLexerNewSSD      (pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the lexer will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define SMPP_RD_IN_YES      72
#define HEX_P      206
#define T__259      259
#define T__258      258
#define REMOTE_IP      241
#define T__257      257
#define SMS_TPDU_ORIGINATING_ENC      103
#define MAP_MSISDN      99
#define T__260      260
#define DQUOTE      216
#define ALW_Q      179
#define T__261      261
#define SMPP_DELIVERY_TIME      26
#define R_CR_B      189
#define EOF      -1
#define GTI_NONE      143
#define HLR_RESULT_NNN      114
#define SMPP_RD_SMEOA_NO      67
#define F_SMPP_MO      191
#define SPAM_REMOVE_LST      154
#define SMPP_NP_PRIVATE      60
#define OFF      197
#define FLOOD_ALL_MAX      167
#define SCCP_GT_CALLED_GTI      94
#define SCCP_GT_CALLED_NP      92
#define NP_MARITIME      134
#define FLOOD_GLOBAL      165
#define NP_ISDN_TELEPHONE      130
#define GOTO      217
#define F_SMPP_MT      193
#define TON_NETWORK_SPECIFIC      125
#define SMPP_DATA_CODING      32
#define LOCAL_PORT      240
#define SMPP_TCP_DESTINATION      11
#define M3UA_OPC      101
#define NP_GENERIC      131
#define SMPP_ESM_MESSAGE_TYPE      22
#define SMPP_RD_INTERMEDIATE_NOTIFICATION      30
#define SMPP_NP_WAP_CLIENT_ID      63
#define GTI_NAI      144
#define MD5_REMOVE_LST      158
#define MD5_SMS_TPDU_UD      119
#define DCS_UCS2      150
#define M3UA_CONNECTION      237
#define WS      248
#define ESCAPESEQUENCE      256
#define CONN_N_APP      245
#define FLOOD_ALL      171
#define SMPP_DC_IA5_ASCII      74
#define RULE_EVAL      222
#define MSG_TYPE_SINGLE      151
#define SL_COMMENT      254
#define DCS_8BIT      149
#define LESS_THAN      207
#define QUARANTINE_SMS_TPDU_UD      118
#define GT      208
#define SMPP_RD_IN_NO      71
#define SMPP_TON_ALPHANUMERIC      52
#define HLR_REQUEST      159
#define SMPP_ESM_GF_UDHI_INDICATOR      44
#define DNY_Q      183
#define STMTSEP      204
#define NP_ISDN_MOBILE      136
#define MD5_UPDATE_LST      157
#define MODIFY      214
#define DUMMY_RULE_DEF      231
#define SMPP_SERVICE_TYPE      14
#define HLR_IMSI      108
#define SMPP_ESM_MT_MANUAL_USER_ACK      42
#define SMPP_DC_KS_C_5601      85
#define NP_TELEX      133
#define SMPP_ESM_GF_NO      43
#define F_MO      190
#define NAI_INTERNATIONAL      142
#define NAI_NATIONAL_SIGNIFICANT_NUMBER      141
#define MODIFIER_STATUS      234
#define SMPP_ESM_GSM_FEATURES      23
#define SMPP_ESM_MESSAGE_MODE      21
#define TON_UNKNOWN      122
#define SMPP_DC_JIS      78
#define ASTERISK      219
#define RULE_REGEX      225
#define HLR_RESULT_ANNN      115
#define SMS_TPDU_ORIGINATING      102
#define RULE_STATUS      223
#define TON_SUBSCRIBER_NUMBER      126
#define NP_PRIVATE      137
#define SMPP_ORIGINATOR_NP      16
#define L_SQ_B      187
#define SMPP_ESM_MT_DEFAULT      40
#define SMPP_TON_SUBSCRIBER_NUMBER      51
#define RP_SMS_TPDU_UD      117
#define NAI_SUBSCRIBER_NUMBER      139
#define NAI_RESERVED_FOR_NATIONAL_USE      140
#define SMPP_RD_SMEOA_MANUAL_USER_ACK      69
#define RULE_EVAL_ATOM      224
#define PLUS      211
#define SMPP_TON_NATIONAL      49
#define SMPP_NP_NATIONAL      59
#define SCCP_GT_CALLED_ADDRESS      86
#define GTI_TTNPENOA      147
#define SMPP_DC_DEFAULT      73
#define SMPP_IP_DESTINATION      9
#define SMPP_ESM_MT_DELIVERY_ACK      41
#define SMPP_DC_8BIT_BINARY_1      75
#define F_HLR      194
#define SMPP_DC_8BIT_BINARY_2      77
#define FLOOD_GLOBAL_MAX      166
#define SQUOTE      215
#define MINUS      212
#define SCCP_GT_CALLING_ADDRESS      87
#define NP_LAND_MOBILE      135
#define CONNECTION_LABEL      238
#define SMS_TPDU_UD      106
#define COLON      203
#define MAP_SCOA_WL      6
#define SCCP_GT_CALLED_TT      88
#define DECIMAL      255
#define RULE_EVAL_TRUE      227
#define QUARANTINE_UPDATE_LST      155
#define STRINGLITERAL      249
#define SMPP_IP_SOURCE      8
#define SCCP_GT_CALLING_GTI      95
#define TON_ABBREVIATED      128
#define RULE_REGEX_EXPR      226
#define SPAM_SMS_TPDU_UD      116
#define CONN_DPC      243
#define RULE_DEF      230
#define F_MT      192
#define QUARANTINE_REMOVE_LST      156
#define MAP_IMSI      98
#define SMPP_DC_ISO_8859_5      79
#define SMPP_RD_SMSCDR_SUCCESS_FAILURE      65
#define FLOOD_DAY      170
#define SMPP_DC_ISO_8859_1      76
#define CONT_Q      177
#define SMS_TPDU_DESTINATION_ENC      105
#define MODIFIER_METHOD      235
#define SMPP_SYSTEM_ID      12
#define SMPP_ESM_MM_FORWARD      38
#define DICT_SMS_TPDU_UD      107
#define SMPP_RD_SMSCDR_NO      64
#define MAP_SCDA      97
#define HLR_NNN      110
#define MODIFIER      233
#define SMPP_DC_ISO_8859_8      80
#define SMPP_RD_SMEOA_BOTH      70
#define SMPP_VALIDITY_PERIOD      27
#define DCS_DEFAULT      148
#define WORD      251
#define SMPP_RD_SMEOA_ACK      68
#define HLR_ANNN      111
#define SMPP_ESM_GF_SET_REPLY_PATH      45
#define SCCP_GT_CALLED_WL      4
#define SMPP_TON_ABBREVIATED      53
#define ALWU_Q      181
#define SMPP_DC_EXTENDED_KANJI      84
#define SMPP_PROTOCOL_ID      24
#define L_PAREN      184
#define NP_UNKNOWN      129
#define NP_DATA_X121      132
#define HLR_SCA      112
#define SMPP_NP_TELEX      57
#define SMPP_ESM_MM_DEFAULT      36
#define SMPP_NP_UNKNOWN      54
#define NEQUAL      202
#define SMPP_REPLACE_IF_PRESENT      31
#define RULE      173
#define SCCP_GT_CALLING_NAI      91
#define ON      196
#define SMPP_TON_INTERNATIONAL      48
#define SMPP_RD_SME_ACK      29
#define LOCAL_IP      239
#define TON_INTERNATIONAL      123
#define SMS_TPDU_DCS      120
#define SMPP_RECIPIENT_TON      18
#define SMPP_SM_DEFAULT_MSG_ID      33
#define LIST      172
#define RULE_EVAL_FALSE      228
#define NAI_UNKNOWN      138
#define SMPP_NP_ERMES      61
#define SMPP_RECIPIENT_ADDRESS      20
#define SMS_TPDU_DESTINATION      104
#define FLOOD      163
#define NOT_IN      175
#define R_SQ_B      186
#define OR      201
#define FILTER_NODE      221
#define M3UA_DPC      100
#define SMPP_NP_LAND_MOBILE      58
#define NO_DR      160
#define MSG_TYPE_CONCATENATED      152
#define SMPP_NP_DATA_X121      56
#define SCCP_GT_CALLING_NP      93
#define HLR_MSISDN      109
#define CONVERT_SMPP      162
#define DIGITS      250
#define REMOTE_PORT      242
#define GTE      210
#define REGEX_BLOCK      218
#define ALWU      180
#define SCCP_GT_CALLED_NAI      90
#define L_CR_B      188
#define SMPP_PASSWORD      13
#define SMPP_DC_PICTOGRAM      82
#define F_M3UA      195
#define SMPP_SM      35
#define SMPP_DC_ISO_2011_JP      83
#define AND      213
#define ANNT      198
#define LTE      209
#define DNY      182
#define ALW      178
#define SCCP_GT_CALLING_WL      5
#define ML_COMMENT      253
#define FLOOD_MINUTE      169
#define IN      174
#define GTI_TT      145
#define SMPP_ORIGINATOR_TON      15
#define SMPP_TON_UNKNOWN      47
#define IP      252
#define SMPP_ESM_MM_STORE_FORWARD      39
#define COMMA      220
#define EQUAL      199
#define SMPP_NP_INTERNET_IP      62
#define HLR_RESULT_IMSI      113
#define SMS_MSG_TYPE      121
#define CONN_SC      247
#define SMPP_PRIORITY_FLAG      25
#define SMPP_NP_ISDN_TELEPHONE      55
#define TON_ALPHANUMERIC      127
#define GTI_TTNPE      146
#define PERCENT      205
#define SMPP_ORIGINATOR_ADDRESS      17
#define MAP_SCOA      96
#define CONVERT_SS7      161
#define SCCP_GT_CALLING_TT      89
#define SMPP_RECIPIENT_NP      19
#define TON_NATIONAL      124
#define CONN_RC      246
#define FLOOD_MAX      164
#define SMPP_TCP_SOURCE      10
#define SMPP_ESM_MM_DATAGRAM      37
#define R_PAREN      185
#define MAP_SCDA_WL      7
#define SPAM_UPDATE_LST      153
#define CONT      176
#define RULE_EVAL_POINTS      229
#define SMPP_RD_SMSCDR_FAILURE      66
#define SMPP_SM_LENGTH      34
#define SMPP_DC_UCS2      81
#define ASSIGN      200
#define SMPP_RD_SMSC_RECEIPT      28
#define FLOOD_HOUR      168
#define CONN_OPC      244
#define MODIFIER_LABEL      236
#define RULE_LABEL      232
#define SMPP_ESM_GF_SET_BOTH      46
#define SMPP_TON_NETWORK_SPECIFIC      50
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for smsfsLexer
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
