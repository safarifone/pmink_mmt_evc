/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : /secure/release14_git/mink/src/asn1/asn1c/asn1.g
 *     -                            On : 2012-05-26 21:23:23
 *     -                for the parser : asn1ParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser asn1Parser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pasn1Parser, which is returned from a call to asn1ParserNew().
 *
 * The methods in pasn1Parser are  as follows:
 *
 *  - asn1Parser_moduleDefinition_return      pasn1Parser->moduleDefinition(pasn1Parser)
 *  - asn1Parser_tagDefault_return      pasn1Parser->tagDefault(pasn1Parser)
 *  - asn1Parser_extensionDefault_return      pasn1Parser->extensionDefault(pasn1Parser)
 *  - asn1Parser_moduleBody_return      pasn1Parser->moduleBody(pasn1Parser)
 *  - asn1Parser_exports_return      pasn1Parser->exports(pasn1Parser)
 *  - asn1Parser_symbolsExported_return      pasn1Parser->symbolsExported(pasn1Parser)
 *  - asn1Parser_imports_return      pasn1Parser->imports(pasn1Parser)
 *  - asn1Parser_symbolsImported_return      pasn1Parser->symbolsImported(pasn1Parser)
 *  - asn1Parser_symbolsFromModuleList_return      pasn1Parser->symbolsFromModuleList(pasn1Parser)
 *  - asn1Parser_symbolsFromModule_return      pasn1Parser->symbolsFromModule(pasn1Parser)
 *  - asn1Parser_globalModuleReference_return      pasn1Parser->globalModuleReference(pasn1Parser)
 *  - asn1Parser_assignedIdentifier_return      pasn1Parser->assignedIdentifier(pasn1Parser)
 *  - asn1Parser_symbolList_return      pasn1Parser->symbolList(pasn1Parser)
 *  - asn1Parser_symbol_return      pasn1Parser->symbol(pasn1Parser)
 *  - asn1Parser_assignmentList_return      pasn1Parser->assignmentList(pasn1Parser)
 *  - asn1Parser_assignment_return      pasn1Parser->assignment(pasn1Parser)
 *  - asn1Parser_sequenceType_return      pasn1Parser->sequenceType(pasn1Parser)
 *  - asn1Parser_extensionAndException_return      pasn1Parser->extensionAndException(pasn1Parser)
 *  - asn1Parser_optionalExtensionMarker_return      pasn1Parser->optionalExtensionMarker(pasn1Parser)
 *  - asn1Parser_componentTypeLists_return      pasn1Parser->componentTypeLists(pasn1Parser)
 *  - asn1Parser_rootComponentTypeList_return      pasn1Parser->rootComponentTypeList(pasn1Parser)
 *  - asn1Parser_componentTypeList_return      pasn1Parser->componentTypeList(pasn1Parser)
 *  - asn1Parser_componentType_return      pasn1Parser->componentType(pasn1Parser)
 *  - asn1Parser_extensionAdditions_return      pasn1Parser->extensionAdditions(pasn1Parser)
 *  - asn1Parser_extensionAdditionList_return      pasn1Parser->extensionAdditionList(pasn1Parser)
 *  - asn1Parser_extensionAddition_return      pasn1Parser->extensionAddition(pasn1Parser)
 *  - asn1Parser_extensionAdditionGroup_return      pasn1Parser->extensionAdditionGroup(pasn1Parser)
 *  - asn1Parser_versionNumber_return      pasn1Parser->versionNumber(pasn1Parser)
 *  - asn1Parser_sequenceOfType_return      pasn1Parser->sequenceOfType(pasn1Parser)
 *  - asn1Parser_sizeConstraint_return      pasn1Parser->sizeConstraint(pasn1Parser)
 *  - asn1Parser_parameterizedAssignment_return      pasn1Parser->parameterizedAssignment(pasn1Parser)
 *  - asn1Parser_parameterList_return      pasn1Parser->parameterList(pasn1Parser)
 *  - asn1Parser_parameter_return      pasn1Parser->parameter(pasn1Parser)
 *  - asn1Parser_paramGovernor_return      pasn1Parser->paramGovernor(pasn1Parser)
 *  - asn1Parser_governor_return      pasn1Parser->governor(pasn1Parser)
 *  - asn1Parser_objectClassAssignment_return      pasn1Parser->objectClassAssignment(pasn1Parser)
 *  - asn1Parser_objectClass_return      pasn1Parser->objectClass(pasn1Parser)
 *  - asn1Parser_definedObjectClass_return      pasn1Parser->definedObjectClass(pasn1Parser)
 *  - asn1Parser_usefulObjectClassReference_return      pasn1Parser->usefulObjectClassReference(pasn1Parser)
 *  - asn1Parser_externalObjectClassReference_return      pasn1Parser->externalObjectClassReference(pasn1Parser)
 *  - asn1Parser_objectClassDefn_return      pasn1Parser->objectClassDefn(pasn1Parser)
 *  - asn1Parser_withSyntaxSpec_return      pasn1Parser->withSyntaxSpec(pasn1Parser)
 *  - asn1Parser_syntaxList_return      pasn1Parser->syntaxList(pasn1Parser)
 *  - asn1Parser_tokenOrGroupSpec_return      pasn1Parser->tokenOrGroupSpec(pasn1Parser)
 *  - asn1Parser_optionalGroup_return      pasn1Parser->optionalGroup(pasn1Parser)
 *  - asn1Parser_requiredToken_return      pasn1Parser->requiredToken(pasn1Parser)
 *  - asn1Parser_literal_return      pasn1Parser->literal(pasn1Parser)
 *  - asn1Parser_primitiveFieldName_return      pasn1Parser->primitiveFieldName(pasn1Parser)
 *  - asn1Parser_fieldSpec_return      pasn1Parser->fieldSpec(pasn1Parser)
 *  - asn1Parser_typeFieldSpec_return      pasn1Parser->typeFieldSpec(pasn1Parser)
 *  - asn1Parser_typeOptionalitySpec_return      pasn1Parser->typeOptionalitySpec(pasn1Parser)
 *  - asn1Parser_fixedTypeValueFieldSpec_return      pasn1Parser->fixedTypeValueFieldSpec(pasn1Parser)
 *  - asn1Parser_valueOptionalitySpec_return      pasn1Parser->valueOptionalitySpec(pasn1Parser)
 *  - asn1Parser_variableTypeValueFieldSpec_return      pasn1Parser->variableTypeValueFieldSpec(pasn1Parser)
 *  - asn1Parser_fixedTypeValueSetFieldSpec_return      pasn1Parser->fixedTypeValueSetFieldSpec(pasn1Parser)
 *  - asn1Parser_valueSetOptionalitySpec_return      pasn1Parser->valueSetOptionalitySpec(pasn1Parser)
 *  - asn1Parser_object_return      pasn1Parser->object(pasn1Parser)
 *  - asn1Parser_parameterizedObject_return      pasn1Parser->parameterizedObject(pasn1Parser)
 *  - asn1Parser_definedObject_return      pasn1Parser->definedObject(pasn1Parser)
 *  - asn1Parser_objectSet_return      pasn1Parser->objectSet(pasn1Parser)
 *  - asn1Parser_objectSetSpec_return      pasn1Parser->objectSetSpec(pasn1Parser)
 *  - asn1Parser_fieldName_return      pasn1Parser->fieldName(pasn1Parser)
 *  - asn1Parser_valueSet_return      pasn1Parser->valueSet(pasn1Parser)
 *  - asn1Parser_elementSetSpecs_return      pasn1Parser->elementSetSpecs(pasn1Parser)
 *  - asn1Parser_rootElementSetSpec_return      pasn1Parser->rootElementSetSpec(pasn1Parser)
 *  - asn1Parser_additionalElementSetSpec_return      pasn1Parser->additionalElementSetSpec(pasn1Parser)
 *  - asn1Parser_elementSetSpec_return      pasn1Parser->elementSetSpec(pasn1Parser)
 *  - asn1Parser_unions_return      pasn1Parser->unions(pasn1Parser)
 *  - asn1Parser_exclusions_return      pasn1Parser->exclusions(pasn1Parser)
 *  - asn1Parser_intersections_return      pasn1Parser->intersections(pasn1Parser)
 *  - asn1Parser_unionMark_return      pasn1Parser->unionMark(pasn1Parser)
 *  - asn1Parser_intersectionMark_return      pasn1Parser->intersectionMark(pasn1Parser)
 *  - asn1Parser_elements_return      pasn1Parser->elements(pasn1Parser)
 *  - asn1Parser_objectSetElements_return      pasn1Parser->objectSetElements(pasn1Parser)
 *  - asn1Parser_intersectionElements_return      pasn1Parser->intersectionElements(pasn1Parser)
 *  - asn1Parser_subtypeElements_return      pasn1Parser->subtypeElements(pasn1Parser)
 *  - asn1Parser_variableTypeValueSetFieldSpec_return      pasn1Parser->variableTypeValueSetFieldSpec(pasn1Parser)
 *  - asn1Parser_objectFieldSpec_return      pasn1Parser->objectFieldSpec(pasn1Parser)
 *  - asn1Parser_objectOptionalitySpec_return      pasn1Parser->objectOptionalitySpec(pasn1Parser)
 *  - asn1Parser_objectSetFieldSpec_return      pasn1Parser->objectSetFieldSpec(pasn1Parser)
 *  - asn1Parser_objectSetOptionalitySpec_return      pasn1Parser->objectSetOptionalitySpec(pasn1Parser)
 *  - asn1Parser_typeAssignment_return      pasn1Parser->typeAssignment(pasn1Parser)
 *  - asn1Parser_valueAssignment_return      pasn1Parser->valueAssignment(pasn1Parser)
 *  - asn1Parser_extraTagDescriptors_return      pasn1Parser->extraTagDescriptors(pasn1Parser)
 *  - asn1Parser_type_return      pasn1Parser->type(pasn1Parser)
 *  - asn1Parser_builtinType_return      pasn1Parser->builtinType(pasn1Parser)
 *  - asn1Parser_objectClassFieldType_return      pasn1Parser->objectClassFieldType(pasn1Parser)
 *  - asn1Parser_setType_return      pasn1Parser->setType(pasn1Parser)
 *  - asn1Parser_setOfType_return      pasn1Parser->setOfType(pasn1Parser)
 *  - asn1Parser_referencedType_return      pasn1Parser->referencedType(pasn1Parser)
 *  - asn1Parser_definedType_return      pasn1Parser->definedType(pasn1Parser)
 *  - asn1Parser_constraint_return      pasn1Parser->constraint(pasn1Parser)
 *  - asn1Parser_constraintSpec_return      pasn1Parser->constraintSpec(pasn1Parser)
 *  - asn1Parser_userDefinedConstraint_return      pasn1Parser->userDefinedConstraint(pasn1Parser)
 *  - asn1Parser_generalConstraint_return      pasn1Parser->generalConstraint(pasn1Parser)
 *  - asn1Parser_userDefinedConstraintParameter_return      pasn1Parser->userDefinedConstraintParameter(pasn1Parser)
 *  - asn1Parser_tableConstraint_return      pasn1Parser->tableConstraint(pasn1Parser)
 *  - asn1Parser_simpleTableConstraint_return      pasn1Parser->simpleTableConstraint(pasn1Parser)
 *  - asn1Parser_contentsConstraint_return      pasn1Parser->contentsConstraint(pasn1Parser)
 *  - asn1Parser_subtypeConstraint_return      pasn1Parser->subtypeConstraint(pasn1Parser)
 *  - asn1Parser_value_return      pasn1Parser->value(pasn1Parser)
 *  - asn1Parser_builtinValue_return      pasn1Parser->builtinValue(pasn1Parser)
 *  - asn1Parser_objectIdentifierValue_return      pasn1Parser->objectIdentifierValue(pasn1Parser)
 *  - asn1Parser_objIdComponentsList_return      pasn1Parser->objIdComponentsList(pasn1Parser)
 *  - asn1Parser_objIdComponents_return      pasn1Parser->objIdComponents(pasn1Parser)
 *  - asn1Parser_integerValue_return      pasn1Parser->integerValue(pasn1Parser)
 *  - asn1Parser_choiceValue_return      pasn1Parser->choiceValue(pasn1Parser)
 *  - asn1Parser_enumeratedValue_return      pasn1Parser->enumeratedValue(pasn1Parser)
 *  - asn1Parser_signedNumber_return      pasn1Parser->signedNumber(pasn1Parser)
 *  - asn1Parser_choiceType_return      pasn1Parser->choiceType(pasn1Parser)
 *  - asn1Parser_alternativeTypeLists_return      pasn1Parser->alternativeTypeLists(pasn1Parser)
 *  - asn1Parser_extensionAdditionAlternatives_return      pasn1Parser->extensionAdditionAlternatives(pasn1Parser)
 *  - asn1Parser_extensionAdditionAlternativesList_return      pasn1Parser->extensionAdditionAlternativesList(pasn1Parser)
 *  - asn1Parser_extensionAdditionAlternative_return      pasn1Parser->extensionAdditionAlternative(pasn1Parser)
 *  - asn1Parser_extensionAdditionAlternativesGroup_return      pasn1Parser->extensionAdditionAlternativesGroup(pasn1Parser)
 *  - asn1Parser_rootAlternativeTypeList_return      pasn1Parser->rootAlternativeTypeList(pasn1Parser)
 *  - asn1Parser_alternativeTypeList_return      pasn1Parser->alternativeTypeList(pasn1Parser)
 *  - asn1Parser_namedType_return      pasn1Parser->namedType(pasn1Parser)
 *  - asn1Parser_enumeratedType_return      pasn1Parser->enumeratedType(pasn1Parser)
 *  - asn1Parser_enumerations_return      pasn1Parser->enumerations(pasn1Parser)
 *  - asn1Parser_rootEnumeration_return      pasn1Parser->rootEnumeration(pasn1Parser)
 *  - asn1Parser_enumeration_return      pasn1Parser->enumeration(pasn1Parser)
 *  - asn1Parser_enumerationItem_return      pasn1Parser->enumerationItem(pasn1Parser)
 *  - asn1Parser_namedNumber_return      pasn1Parser->namedNumber(pasn1Parser)
 *  - asn1Parser_definedValue_return      pasn1Parser->definedValue(pasn1Parser)
 *  - asn1Parser_parameterizedValue_return      pasn1Parser->parameterizedValue(pasn1Parser)
 *  - asn1Parser_simpleDefinedValue_return      pasn1Parser->simpleDefinedValue(pasn1Parser)
 *  - asn1Parser_actualParameterList_return      pasn1Parser->actualParameterList(pasn1Parser)
 *  - asn1Parser_actualParameter_return      pasn1Parser->actualParameter(pasn1Parser)
 *  - asn1Parser_exceptionSpec_return      pasn1Parser->exceptionSpec(pasn1Parser)
 *  - asn1Parser_exceptionIdentification_return      pasn1Parser->exceptionIdentification(pasn1Parser)
 *  - asn1Parser_additionalEnumeration_return      pasn1Parser->additionalEnumeration(pasn1Parser)
 *  - asn1Parser_integerType_return      pasn1Parser->integerType(pasn1Parser)
 *  - asn1Parser_namedNumberList_return      pasn1Parser->namedNumberList(pasn1Parser)
 *  - asn1Parser_objectidentifiertype_return      pasn1Parser->objectidentifiertype(pasn1Parser)
 *  - asn1Parser_componentRelationConstraint_return      pasn1Parser->componentRelationConstraint(pasn1Parser)
 *  - asn1Parser_atNotation_return      pasn1Parser->atNotation(pasn1Parser)
 *  - asn1Parser_level_return      pasn1Parser->level(pasn1Parser)
 *  - asn1Parser_componentIdList_return      pasn1Parser->componentIdList(pasn1Parser)
 *  - asn1Parser_octetStringType_return      pasn1Parser->octetStringType(pasn1Parser)
 *  - asn1Parser_ia5stringType_return      pasn1Parser->ia5stringType(pasn1Parser)
 *  - asn1Parser_nullType_return      pasn1Parser->nullType(pasn1Parser)
 *  - asn1Parser_booleanType_return      pasn1Parser->booleanType(pasn1Parser)
 *  - asn1Parser_bitStringType_return      pasn1Parser->bitStringType(pasn1Parser)
 *  - asn1Parser_namedBitList_return      pasn1Parser->namedBitList(pasn1Parser)
 *  - asn1Parser_namedBit_return      pasn1Parser->namedBit(pasn1Parser)
 *  - asn1Parser_booleanValue_return      pasn1Parser->booleanValue(pasn1Parser)
 *  - asn1Parser_bitValue_return      pasn1Parser->bitValue(pasn1Parser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_asn1Parser_H
#define _asn1Parser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct asn1Parser_Ctx_struct asn1Parser, * pasn1Parser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct asn1Parser_moduleDefinition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_moduleDefinition_return;

typedef struct asn1Parser_tagDefault_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_tagDefault_return;

typedef struct asn1Parser_extensionDefault_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_extensionDefault_return;

typedef struct asn1Parser_moduleBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_moduleBody_return;

typedef struct asn1Parser_exports_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_exports_return;

typedef struct asn1Parser_symbolsExported_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_symbolsExported_return;

typedef struct asn1Parser_imports_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_imports_return;

typedef struct asn1Parser_symbolsImported_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_symbolsImported_return;

typedef struct asn1Parser_symbolsFromModuleList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_symbolsFromModuleList_return;

typedef struct asn1Parser_symbolsFromModule_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_symbolsFromModule_return;

typedef struct asn1Parser_globalModuleReference_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_globalModuleReference_return;

typedef struct asn1Parser_assignedIdentifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_assignedIdentifier_return;

typedef struct asn1Parser_symbolList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_symbolList_return;

typedef struct asn1Parser_symbol_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_symbol_return;

typedef struct asn1Parser_assignmentList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_assignmentList_return;

typedef struct asn1Parser_assignment_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_assignment_return;

typedef struct asn1Parser_sequenceType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_sequenceType_return;

typedef struct asn1Parser_extensionAndException_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_extensionAndException_return;

typedef struct asn1Parser_optionalExtensionMarker_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_optionalExtensionMarker_return;

typedef struct asn1Parser_componentTypeLists_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_componentTypeLists_return;

typedef struct asn1Parser_rootComponentTypeList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_rootComponentTypeList_return;

typedef struct asn1Parser_componentTypeList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_componentTypeList_return;

typedef struct asn1Parser_componentType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_componentType_return;

typedef struct asn1Parser_extensionAdditions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_extensionAdditions_return;

typedef struct asn1Parser_extensionAdditionList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_extensionAdditionList_return;

typedef struct asn1Parser_extensionAddition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_extensionAddition_return;

typedef struct asn1Parser_extensionAdditionGroup_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_extensionAdditionGroup_return;

typedef struct asn1Parser_versionNumber_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_versionNumber_return;

typedef struct asn1Parser_sequenceOfType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_sequenceOfType_return;

typedef struct asn1Parser_sizeConstraint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_sizeConstraint_return;

typedef struct asn1Parser_parameterizedAssignment_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_parameterizedAssignment_return;

typedef struct asn1Parser_parameterList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_parameterList_return;

typedef struct asn1Parser_parameter_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_parameter_return;

typedef struct asn1Parser_paramGovernor_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_paramGovernor_return;

typedef struct asn1Parser_governor_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_governor_return;

typedef struct asn1Parser_objectClassAssignment_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_objectClassAssignment_return;

typedef struct asn1Parser_objectClass_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_objectClass_return;

typedef struct asn1Parser_definedObjectClass_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_definedObjectClass_return;

typedef struct asn1Parser_usefulObjectClassReference_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_usefulObjectClassReference_return;

typedef struct asn1Parser_externalObjectClassReference_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_externalObjectClassReference_return;

typedef struct asn1Parser_objectClassDefn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_objectClassDefn_return;

typedef struct asn1Parser_withSyntaxSpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_withSyntaxSpec_return;

typedef struct asn1Parser_syntaxList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_syntaxList_return;

typedef struct asn1Parser_tokenOrGroupSpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_tokenOrGroupSpec_return;

typedef struct asn1Parser_optionalGroup_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_optionalGroup_return;

typedef struct asn1Parser_requiredToken_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_requiredToken_return;

typedef struct asn1Parser_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_literal_return;

typedef struct asn1Parser_primitiveFieldName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_primitiveFieldName_return;

typedef struct asn1Parser_fieldSpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_fieldSpec_return;

typedef struct asn1Parser_typeFieldSpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_typeFieldSpec_return;

typedef struct asn1Parser_typeOptionalitySpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_typeOptionalitySpec_return;

typedef struct asn1Parser_fixedTypeValueFieldSpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_fixedTypeValueFieldSpec_return;

typedef struct asn1Parser_valueOptionalitySpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_valueOptionalitySpec_return;

typedef struct asn1Parser_variableTypeValueFieldSpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_variableTypeValueFieldSpec_return;

typedef struct asn1Parser_fixedTypeValueSetFieldSpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_fixedTypeValueSetFieldSpec_return;

typedef struct asn1Parser_valueSetOptionalitySpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_valueSetOptionalitySpec_return;

typedef struct asn1Parser_object_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_object_return;

typedef struct asn1Parser_parameterizedObject_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_parameterizedObject_return;

typedef struct asn1Parser_definedObject_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_definedObject_return;

typedef struct asn1Parser_objectSet_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_objectSet_return;

typedef struct asn1Parser_objectSetSpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_objectSetSpec_return;

typedef struct asn1Parser_fieldName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_fieldName_return;

typedef struct asn1Parser_valueSet_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_valueSet_return;

typedef struct asn1Parser_elementSetSpecs_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_elementSetSpecs_return;

typedef struct asn1Parser_rootElementSetSpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_rootElementSetSpec_return;

typedef struct asn1Parser_additionalElementSetSpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_additionalElementSetSpec_return;

typedef struct asn1Parser_elementSetSpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_elementSetSpec_return;

typedef struct asn1Parser_unions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_unions_return;

typedef struct asn1Parser_exclusions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_exclusions_return;

typedef struct asn1Parser_intersections_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_intersections_return;

typedef struct asn1Parser_unionMark_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_unionMark_return;

typedef struct asn1Parser_intersectionMark_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_intersectionMark_return;

typedef struct asn1Parser_elements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_elements_return;

typedef struct asn1Parser_objectSetElements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_objectSetElements_return;

typedef struct asn1Parser_intersectionElements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_intersectionElements_return;

typedef struct asn1Parser_subtypeElements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_subtypeElements_return;

typedef struct asn1Parser_variableTypeValueSetFieldSpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_variableTypeValueSetFieldSpec_return;

typedef struct asn1Parser_objectFieldSpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_objectFieldSpec_return;

typedef struct asn1Parser_objectOptionalitySpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_objectOptionalitySpec_return;

typedef struct asn1Parser_objectSetFieldSpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_objectSetFieldSpec_return;

typedef struct asn1Parser_objectSetOptionalitySpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_objectSetOptionalitySpec_return;

typedef struct asn1Parser_typeAssignment_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_typeAssignment_return;

typedef struct asn1Parser_valueAssignment_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_valueAssignment_return;

typedef struct asn1Parser_extraTagDescriptors_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_extraTagDescriptors_return;

typedef struct asn1Parser_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_type_return;

typedef struct asn1Parser_builtinType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_builtinType_return;

typedef struct asn1Parser_objectClassFieldType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_objectClassFieldType_return;

typedef struct asn1Parser_setType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_setType_return;

typedef struct asn1Parser_setOfType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_setOfType_return;

typedef struct asn1Parser_referencedType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_referencedType_return;

typedef struct asn1Parser_definedType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_definedType_return;

typedef struct asn1Parser_constraint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_constraint_return;

typedef struct asn1Parser_constraintSpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_constraintSpec_return;

typedef struct asn1Parser_userDefinedConstraint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_userDefinedConstraint_return;

typedef struct asn1Parser_generalConstraint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_generalConstraint_return;

typedef struct asn1Parser_userDefinedConstraintParameter_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_userDefinedConstraintParameter_return;

typedef struct asn1Parser_tableConstraint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_tableConstraint_return;

typedef struct asn1Parser_simpleTableConstraint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_simpleTableConstraint_return;

typedef struct asn1Parser_contentsConstraint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_contentsConstraint_return;

typedef struct asn1Parser_subtypeConstraint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_subtypeConstraint_return;

typedef struct asn1Parser_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_value_return;

typedef struct asn1Parser_builtinValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_builtinValue_return;

typedef struct asn1Parser_objectIdentifierValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_objectIdentifierValue_return;

typedef struct asn1Parser_objIdComponentsList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_objIdComponentsList_return;

typedef struct asn1Parser_objIdComponents_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_objIdComponents_return;

typedef struct asn1Parser_integerValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_integerValue_return;

typedef struct asn1Parser_choiceValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_choiceValue_return;

typedef struct asn1Parser_enumeratedValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_enumeratedValue_return;

typedef struct asn1Parser_signedNumber_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_signedNumber_return;

typedef struct asn1Parser_choiceType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_choiceType_return;

typedef struct asn1Parser_alternativeTypeLists_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_alternativeTypeLists_return;

typedef struct asn1Parser_extensionAdditionAlternatives_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_extensionAdditionAlternatives_return;

typedef struct asn1Parser_extensionAdditionAlternativesList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_extensionAdditionAlternativesList_return;

typedef struct asn1Parser_extensionAdditionAlternative_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_extensionAdditionAlternative_return;

typedef struct asn1Parser_extensionAdditionAlternativesGroup_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_extensionAdditionAlternativesGroup_return;

typedef struct asn1Parser_rootAlternativeTypeList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_rootAlternativeTypeList_return;

typedef struct asn1Parser_alternativeTypeList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_alternativeTypeList_return;

typedef struct asn1Parser_namedType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_namedType_return;

typedef struct asn1Parser_enumeratedType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_enumeratedType_return;

typedef struct asn1Parser_enumerations_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_enumerations_return;

typedef struct asn1Parser_rootEnumeration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_rootEnumeration_return;

typedef struct asn1Parser_enumeration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_enumeration_return;

typedef struct asn1Parser_enumerationItem_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_enumerationItem_return;

typedef struct asn1Parser_namedNumber_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_namedNumber_return;

typedef struct asn1Parser_definedValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_definedValue_return;

typedef struct asn1Parser_parameterizedValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_parameterizedValue_return;

typedef struct asn1Parser_simpleDefinedValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_simpleDefinedValue_return;

typedef struct asn1Parser_actualParameterList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_actualParameterList_return;

typedef struct asn1Parser_actualParameter_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_actualParameter_return;

typedef struct asn1Parser_exceptionSpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_exceptionSpec_return;

typedef struct asn1Parser_exceptionIdentification_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_exceptionIdentification_return;

typedef struct asn1Parser_additionalEnumeration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_additionalEnumeration_return;

typedef struct asn1Parser_integerType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_integerType_return;

typedef struct asn1Parser_namedNumberList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_namedNumberList_return;

typedef struct asn1Parser_objectidentifiertype_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_objectidentifiertype_return;

typedef struct asn1Parser_componentRelationConstraint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_componentRelationConstraint_return;

typedef struct asn1Parser_atNotation_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_atNotation_return;

typedef struct asn1Parser_level_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_level_return;

typedef struct asn1Parser_componentIdList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_componentIdList_return;

typedef struct asn1Parser_octetStringType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_octetStringType_return;

typedef struct asn1Parser_ia5stringType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_ia5stringType_return;

typedef struct asn1Parser_nullType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_nullType_return;

typedef struct asn1Parser_booleanType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_booleanType_return;

typedef struct asn1Parser_bitStringType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_bitStringType_return;

typedef struct asn1Parser_namedBitList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_namedBitList_return;

typedef struct asn1Parser_namedBit_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_namedBit_return;

typedef struct asn1Parser_booleanValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_booleanValue_return;

typedef struct asn1Parser_bitValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    asn1Parser_bitValue_return;



/** Context tracking structure for asn1Parser
 */
struct asn1Parser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     asn1Parser_moduleDefinition_return (*moduleDefinition)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_tagDefault_return (*tagDefault)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_extensionDefault_return (*extensionDefault)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_moduleBody_return (*moduleBody)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_exports_return (*exports)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_symbolsExported_return (*symbolsExported)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_imports_return (*imports)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_symbolsImported_return (*symbolsImported)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_symbolsFromModuleList_return (*symbolsFromModuleList)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_symbolsFromModule_return (*symbolsFromModule)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_globalModuleReference_return (*globalModuleReference)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_assignedIdentifier_return (*assignedIdentifier)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_symbolList_return (*symbolList)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_symbol_return (*symbol)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_assignmentList_return (*assignmentList)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_assignment_return (*assignment)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_sequenceType_return (*sequenceType)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_extensionAndException_return (*extensionAndException)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_optionalExtensionMarker_return (*optionalExtensionMarker)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_componentTypeLists_return (*componentTypeLists)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_rootComponentTypeList_return (*rootComponentTypeList)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_componentTypeList_return (*componentTypeList)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_componentType_return (*componentType)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_extensionAdditions_return (*extensionAdditions)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_extensionAdditionList_return (*extensionAdditionList)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_extensionAddition_return (*extensionAddition)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_extensionAdditionGroup_return (*extensionAdditionGroup)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_versionNumber_return (*versionNumber)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_sequenceOfType_return (*sequenceOfType)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_sizeConstraint_return (*sizeConstraint)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_parameterizedAssignment_return (*parameterizedAssignment)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_parameterList_return (*parameterList)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_parameter_return (*parameter)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_paramGovernor_return (*paramGovernor)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_governor_return (*governor)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_objectClassAssignment_return (*objectClassAssignment)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_objectClass_return (*objectClass)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_definedObjectClass_return (*definedObjectClass)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_usefulObjectClassReference_return (*usefulObjectClassReference)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_externalObjectClassReference_return (*externalObjectClassReference)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_objectClassDefn_return (*objectClassDefn)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_withSyntaxSpec_return (*withSyntaxSpec)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_syntaxList_return (*syntaxList)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_tokenOrGroupSpec_return (*tokenOrGroupSpec)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_optionalGroup_return (*optionalGroup)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_requiredToken_return (*requiredToken)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_literal_return (*literal)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_primitiveFieldName_return (*primitiveFieldName)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_fieldSpec_return (*fieldSpec)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_typeFieldSpec_return (*typeFieldSpec)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_typeOptionalitySpec_return (*typeOptionalitySpec)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_fixedTypeValueFieldSpec_return (*fixedTypeValueFieldSpec)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_valueOptionalitySpec_return (*valueOptionalitySpec)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_variableTypeValueFieldSpec_return (*variableTypeValueFieldSpec)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_fixedTypeValueSetFieldSpec_return (*fixedTypeValueSetFieldSpec)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_valueSetOptionalitySpec_return (*valueSetOptionalitySpec)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_object_return (*object)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_parameterizedObject_return (*parameterizedObject)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_definedObject_return (*definedObject)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_objectSet_return (*objectSet)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_objectSetSpec_return (*objectSetSpec)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_fieldName_return (*fieldName)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_valueSet_return (*valueSet)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_elementSetSpecs_return (*elementSetSpecs)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_rootElementSetSpec_return (*rootElementSetSpec)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_additionalElementSetSpec_return (*additionalElementSetSpec)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_elementSetSpec_return (*elementSetSpec)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_unions_return (*unions)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_exclusions_return (*exclusions)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_intersections_return (*intersections)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_unionMark_return (*unionMark)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_intersectionMark_return (*intersectionMark)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_elements_return (*elements)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_objectSetElements_return (*objectSetElements)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_intersectionElements_return (*intersectionElements)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_subtypeElements_return (*subtypeElements)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_variableTypeValueSetFieldSpec_return (*variableTypeValueSetFieldSpec)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_objectFieldSpec_return (*objectFieldSpec)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_objectOptionalitySpec_return (*objectOptionalitySpec)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_objectSetFieldSpec_return (*objectSetFieldSpec)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_objectSetOptionalitySpec_return (*objectSetOptionalitySpec)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_typeAssignment_return (*typeAssignment)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_valueAssignment_return (*valueAssignment)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_extraTagDescriptors_return (*extraTagDescriptors)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_type_return (*type)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_builtinType_return (*builtinType)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_objectClassFieldType_return (*objectClassFieldType)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_setType_return (*setType)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_setOfType_return (*setOfType)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_referencedType_return (*referencedType)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_definedType_return (*definedType)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_constraint_return (*constraint)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_constraintSpec_return (*constraintSpec)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_userDefinedConstraint_return (*userDefinedConstraint)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_generalConstraint_return (*generalConstraint)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_userDefinedConstraintParameter_return (*userDefinedConstraintParameter)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_tableConstraint_return (*tableConstraint)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_simpleTableConstraint_return (*simpleTableConstraint)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_contentsConstraint_return (*contentsConstraint)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_subtypeConstraint_return (*subtypeConstraint)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_value_return (*value)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_builtinValue_return (*builtinValue)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_objectIdentifierValue_return (*objectIdentifierValue)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_objIdComponentsList_return (*objIdComponentsList)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_objIdComponents_return (*objIdComponents)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_integerValue_return (*integerValue)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_choiceValue_return (*choiceValue)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_enumeratedValue_return (*enumeratedValue)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_signedNumber_return (*signedNumber)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_choiceType_return (*choiceType)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_alternativeTypeLists_return (*alternativeTypeLists)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_extensionAdditionAlternatives_return (*extensionAdditionAlternatives)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_extensionAdditionAlternativesList_return (*extensionAdditionAlternativesList)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_extensionAdditionAlternative_return (*extensionAdditionAlternative)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_extensionAdditionAlternativesGroup_return (*extensionAdditionAlternativesGroup)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_rootAlternativeTypeList_return (*rootAlternativeTypeList)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_alternativeTypeList_return (*alternativeTypeList)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_namedType_return (*namedType)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_enumeratedType_return (*enumeratedType)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_enumerations_return (*enumerations)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_rootEnumeration_return (*rootEnumeration)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_enumeration_return (*enumeration)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_enumerationItem_return (*enumerationItem)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_namedNumber_return (*namedNumber)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_definedValue_return (*definedValue)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_parameterizedValue_return (*parameterizedValue)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_simpleDefinedValue_return (*simpleDefinedValue)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_actualParameterList_return (*actualParameterList)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_actualParameter_return (*actualParameter)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_exceptionSpec_return (*exceptionSpec)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_exceptionIdentification_return (*exceptionIdentification)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_additionalEnumeration_return (*additionalEnumeration)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_integerType_return (*integerType)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_namedNumberList_return (*namedNumberList)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_objectidentifiertype_return (*objectidentifiertype)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_componentRelationConstraint_return (*componentRelationConstraint)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_atNotation_return (*atNotation)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_level_return (*level)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_componentIdList_return (*componentIdList)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_octetStringType_return (*octetStringType)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_ia5stringType_return (*ia5stringType)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_nullType_return (*nullType)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_booleanType_return (*booleanType)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_bitStringType_return (*bitStringType)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_namedBitList_return (*namedBitList)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_namedBit_return (*namedBit)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_booleanValue_return (*booleanValue)	(struct asn1Parser_Ctx_struct * ctx);
     asn1Parser_bitValue_return (*bitValue)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred23_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred24_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred25_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred26_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred27_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred28_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred42_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred43_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred44_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred47_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred48_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred49_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred51_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred52_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred55_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred56_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred57_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred62_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred75_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred78_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred80_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred102_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred104_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred105_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred108_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred109_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred114_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred137_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred138_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred139_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred140_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred142_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred143_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred144_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred145_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred146_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred148_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred150_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred155_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred157_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred158_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred160_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred161_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred169_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred180_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred186_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred187_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred189_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred191_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred192_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred201_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred202_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred204_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred205_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred207_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred208_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred209_asn1)	(struct asn1Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred210_asn1)	(struct asn1Parser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct asn1Parser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pasn1Parser asn1ParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pasn1Parser asn1ParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define MODULE_ID      100
#define NODE_COMPONENT      113
#define SEQUENCE_LITERAL      38
#define STAR      5
#define IDENTIFIER_NODE      103
#define LETTER      131
#define RELATIVE_OID_LITERAL      92
#define ABSENT_LITERAL      59
#define DEFINITION_NODE      106
#define EOF      -1
#define AUTOMATIC_LITERAL      77
#define DOUBLE_DOT      11
#define DEFAULT_LITERAL      40
#define ASSIGN_OP      6
#define STRING_LITERAL      34
#define IDENTIFIER_LITERAL      91
#define BIT_LITERAL      33
#define REAL_LITERAL      30
#define PATTERN_LITERAL      60
#define OCTET_LITERAL      36
#define R_PARAN      27
#define TRUE_LITERAL      8
#define APOSTROPHE      13
#define CHOICE_LITERAL      84
#define COMMENT      98
#define FALSE_SMALL_LITERAL      20
#define APPLICATION_LITERAL      86
#define OPTIONAL_LITERAL      39
#define LESS_THAN_SLASH      17
#define LINE_COMMENT      126
#define IMPLICIT_LITERAL      76
#define NUMBER      117
#define CHARACTER_LITERAL      93
#define L_BRACE      23
#define ELLIPSIS      12
#define POWER      47
#define NULL_LITERAL      37
#define SEMI_COLON      69
#define DEFINITIONS_NODE      102
#define UNION_LITERAL      49
#define PLUS_INFINITY_LITERAL      31
#define ABSTRACT_SYNTAX_LITERAL      62
#define EXCEPT_LITERAL      46
#define INSTANCE_LITERAL      68
#define COMPONENT_LITERAL      57
#define END_LITERAL      80
#define ENUMERATED_LITERAL      29
#define INCLUDES_LITERAL      51
#define WS      124
#define BSTRING      119
#define EMBEDDED_LITERAL      88
#define CLASS_LITERAL      63
#define DOUBLE_L_BRACKET      81
#define INTEGER_LITERAL      21
#define LESS_THAN      15
#define JavaIDDigit      132
#define SYNTAX_LITERAL      65
#define EXPORTS_LITERAL      71
#define SET_LITERAL      43
#define CSTRING      130
#define LOWER      123
#define IMPORTS_NODE      108
#define BEGIN_LITERAL      79
#define ALL_LITERAL      45
#define EscapeSequence      129
#define UPPER      122
#define L_BRACKET      66
#define TAG_DESCRIPTOR      111
#define MODULE_VERSION      101
#define NODE_INFO      109
#define TAGS_LITERAL      75
#define Exponent      125
#define FALSE_LITERAL      9
#define PRESENT_LITERAL      58
#define DEFINITIONS_LITERAL      78
#define EXTENSIBILITY_LITERAL      72
#define OBJECT_LITERAL      90
#define EXPLICIT_LITERAL      74
#define NODE_NAME      115
#define COMPONENTS_LITERAL      41
#define EXTENSTIONENDMARKER      118
#define TYPE_IDENTIFIER_LITERAL      61
#define A_ROND_DOT      96
#define COMMA      25
#define TRUE_SMALL_LITERAL      19
#define IDENTIFIER      116
#define ENCODED_LITERAL      97
#define BY_LITERAL      95
#define PRIVATE_LITERAL      87
#define PIPE      48
#define A_ROND      4
#define DIGIT      121
#define DOT      10
#define TAG_DEFINITIONS      112
#define L_PARAN      26
#define TYPE_NODE      105
#define UNIQUE_LITERAL      64
#define UNIVERSAL_LITERAL      85
#define MINUS_INFINITY_LITERAL      32
#define MIN_LITERAL      52
#define GREATER_THAN      16
#define HSTRING      128
#define WITH_LITERAL      56
#define IMPORTS_LITERAL      70
#define AMPERSAND      14
#define R_BRACE      24
#define SIZE_LITERAL      54
#define MINUS      28
#define R_BRACKET      67
#define IMPLIED_LITERAL      73
#define FROM_LITERAL      55
#define BOOLEAN_LITERAL      7
#define COLON      83
#define PDV_LITERAL      89
#define EXPORTS_NODE      107
#define SHASH_GREATER_THEN      18
#define TAG_SPECIFIC      114
#define VALUE_NODE      104
#define CONTAINING_LITERAL      35
#define EXCLAM      44
#define UNRESTRICTEDCHARACTERSTRINGTYPE      120
#define BODY_NODE      110
#define CONSTRAINED_LITERAL      94
#define IA5_STRING_LITERAL      22
#define INTERSECTION_LITERAL      50
#define MODULE_ROOT      99
#define OF_LITERAL      42
#define MAX_LITERAL      53
#define DOUBLE_R_BRACKET      82
#define HEXDIGIT      127
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for asn1Parser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
