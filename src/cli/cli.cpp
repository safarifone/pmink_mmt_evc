#include <cli.h>
#include <curses.h>
#include <antlr_utils.h>
#include <pmink_utils.h>
#include <boost/regex.hpp>




// CLIItem
cli::CLIItem::CLIItem(){
	is_set = false;
	parent = NULL;
	node_type = CLI_UNKNOWN;
}
cli::CLIItem::~CLIItem(){
	// children
	for(unsigned int i = 0; i<children.size(); i++) if(children[i] != NULL) delete children[i];
	children.clear();

}




cli::CLIService::CLIService(){
	prompt = "<UNDEFINED> ";
	cli_def = NULL;
	max_history = 50;
	history_index = -1;

	pmink_parser = antlr::create_parser();
}

cli::CLIService::~CLIService(){
	for(int i = 0; i<history.size(); i++) delete history[i];
	history.clear();

	for(int i = 0; i<patterns.size(); i++) delete patterns[i];
	patterns.clear();

	// free parser
	antlr::free_mem(pmink_parser);



}

void cli::CLIService::print_cli_tree(cli::CLIItem* tree, int depth){
	// padding
	for(int i = 0; i<depth; i++) cout << "  ";
	cout << tree->name << " - " << tree->type << " - " << tree->desc << endl;
	// child count
	int n = tree->children.size();
	for(int i = 0; i<n; i++){
		// print
		print_cli_tree(tree->children[i], depth + 1);
	}

}


void cli::CLIService::set_prompt(char* _prompt){
	prompt = _prompt;
}
void cli::CLIService::set_prompt(std::string* _prompt){
	prompt = *_prompt;
}

void cli::CLIService::set_cli_tree(CLIItem* cli_tree){
	cli_def = cli_tree;
}

void cli::CLIService::init_colors(){
	// red fg, transparent bg
	init_pair(1, COLOR_RED, -1);
	// blue fg, transparent bg
	init_pair(2, COLOR_BLUE, -1);
	// white fg, transparent bg
	init_pair(3, COLOR_WHITE, -1);
	// green fg, transparent bg
	init_pair(4, COLOR_GREEN, -1);
	// yellow fg, transparent bg
	init_pair(5, COLOR_YELLOW, -1);
	// cyan fg, transparent bg
	init_pair(6, COLOR_CYAN, -1);

}

void cli::CLIService::search_cli_def(CLIItem* def, int current_level, int target_level, string* target, CLIItem* result){
	if(def != NULL && target != NULL && result != NULL){
		CLIItem* tmp_ci = NULL;
		// child count
		int n = def->children.size();
		for(int i = 0; i<n; i++){
			tmp_ci = def->children[i];
			// check if at the right level
			if(current_level != target_level){
				search_cli_def(tmp_ci, current_level + 1, target_level, target, result);
			// right levelnumeric_limits<int>::max();
			}else{
				//cout << "CI: " << tmp_ci->name << endl;
				//cout << "TARGET: " << *target << endl;
				if(tmp_ci->name.compare(0, target->length(), *target) == 0){
					//cout << "search_cli_def: " << tmp_ci->name << endl;
					result->children.push_back(tmp_ci);


				}


			}
		}
	}

}


void cli::CLIService::cli_auto_complete(CLIItem* def, string* line, int line_size, CLIItem* result, int* result_size){
	string tmp_str;
	bool param_found = false;
	if(def != NULL && line != NULL){
		// reset result size
		*result_size = 0;
		// check for line tokens
		if(line_size > 0){
			for(int i = 0; i<line_size; i++){
				// curent line token
				tmp_str = line[i];

				// param value detection, check if previous node type is CLI_PARAM
				if(result->children.size() == 1){
					if(result->children[0]->node_type == cli::CLI_PARAM){
						(*result_size)++;
						param_found = true;
						// mark as set
						result->children[0]->is_set = true;
						result->children[0]->param_value = tmp_str;
					}

				}

				// clear result for current level
				result->children.clear();
				// search matching nodes if current node is note param value
				if(!param_found) search_cli_def(def, 0, 0, &tmp_str, result);
				// single match
				if(result->children.size() == 1) {
					// definition found, inc
					(*result_size)++;
					// if not param, search one level deeper
					if(result->children[0]->node_type != cli::CLI_PARAM){
						// go deeper
						def = result->children[0];
						// update line if one and only one match found
						line[i] = result->children[0]->name;
						result->children.clear();
						tmp_str = "";
						// search available options
						search_cli_def(def, 0, 0, &tmp_str, result);

					}

				// more matches, stop processing
				}else{
					// param value
					if(param_found){
						param_found = false;
						tmp_str = "";
						// display all parameters again
						search_cli_def(def, 0, 0, &tmp_str, result);
					// other
					}else{
						// if multiple nodes match
						if(result->children.size() > 0){
							// assume min size of 100
							int min_size = 100;
							// find shortest string
							for(int j = 0; j<result->children.size(); j++) if(result->children[j]->name.size() < min_size) min_size = result->children[j]->name.size();
							// set max_match to current min_size
							int max_match = min_size;
							// get common starting substring
							for(int j = 1; j<result->children.size(); j++){
								for(int k = 0; k<min_size; k++){
									if(result->children[j]->name[k] != result->children[0]->name[k]){
										if(k < max_match) max_match = k;
										break;

									}

								}
							}
							// set current line item to common substring
							line[i] = result->children[0]->name.substr(0, max_match);

						}

						// if not last item, stop processing when multiple lines match
						if(i != (line_size - 1)) return;

					}
				}

			}
		// no line input, display all zero level options
		}else{
			search_cli_def(def, 0, 0, &tmp_str, result);

		}
	}
}

void cli::CLIService::print_cli_def(CLIItem* def, int level, int max_levels){
	if(def != NULL){
		// child count
		int n = def->children.size();
		for(int i = 0; i<n; i++){
			// padding
			//for(int j = 0; j<level; j++) printw("  ");
			switch(def->children[i]->node_type){
				case cli::CLI_CONST: attron(COLOR_PAIR(2)); break;
				case cli::CLI_PARAM: attron(COLOR_PAIR(5)); break;
				default: attron(COLOR_PAIR(4)); break;

			}
			printw("%20s", def->children[i]->name.c_str());
			if(def->children[i]->is_set){
				attron(COLOR_PAIR(4));
				printw(" ** [");
				printw(def->children[i]->param_value.c_str());
				printw("] ** ");
				attroff(COLOR_PAIR(4));
			}
			//printw(" - ");
			//printw(def->children[i]->name.c_str());
			if(def->children[i]->desc != ""){
				printw(" - ");
				attrset(A_NORMAL);
				attron(COLOR_PAIR(3));
				printw(def->children[i]->desc.c_str());

			}
			printw("\n");
			attrset(A_NORMAL);

			// next level
			if((level + 1) < max_levels) print_cli_def(def->children[i], level + 1, max_levels);
		}

	}
}

void cli::CLIService::add_to_history(string* _line){
	if(history.size() < max_history){
		history.push_back(new std::string(*_line));
	}else{
		// move
		for(int i = 1; i<history.size(); i++) *history[i - 1] = *history[i];

		// add new
		*history[history.size() - 1] = *_line;
	}
}


void cli::CLIService::add_pattern(CLIPattern* ptrn){
	patterns.push_back(ptrn);
}


cli::CLIPattern* cli::CLIService::get_pattern(string* type){
	//std::cout << "!!!TYPE:: " << *type << std::endl;
	for(int i = 0; i<patterns.size(); i++){
		//std::cout << "Pattern 1: " << patterns[i]->name << " - " << patterns[i]->pattern << std::endl;
		if(patterns[i]->name == *type){
			//std::cout << "Pattern 2: " << patterns[i]->name << " - " << patterns[i]->pattern << std::endl;
			return patterns[i];
		}
	}
	return NULL;
}
bool cli::CLIService::param_valid(string* param_value, string* param_type){
	//std::cout << "cli::CLIService::param_valid: " << *param_type <<  std::endl;
	cli::CLIPattern* ptrn = get_pattern(param_type);
	if(ptrn != NULL){
		//std::cout << "Checking pattern: " << ptrn->pattern << ", Value: " << *param_value << std::endl;
		boost::regex regex(ptrn->pattern);
		//std::cout << "Regex res: " << boost::regex_match(*param_value, regex) << std::endl;
		// remove quotes if necessary
		if((*param_value)[0] == '"' && (*param_value)[param_value->size() - 1] == '"'){
			param_value->erase(param_value->begin(), param_value->begin() + 1);
			param_value->erase(param_value->end() - 1, param_value->end());
		}

		return boost::regex_match(*param_value, regex);

	}
	return false;
}


void cli::CLIService::start(){
	// ncurses init
	initscr();
	start_color();
	use_default_colors();
	noecho();
	cbreak();
	keypad(stdscr, true);
	scrollok(stdscr, true);

	// init colors
	init_colors();

	// set prompt
	char tmp[100];
	CLIItem tmp_cli_res;


	getlogin_r(tmp, 100);
	std::string prompt(tmp);
	gethostname(tmp, 100);
	prompt.append("@");
	prompt.append(tmp);
	prompt.append("> ");


	int tmp_ch, x, y;
	int arr_l = 0, arr_r = 0;
/*
	unsigned char imageBytes[] = {
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x4f,0x6f,0x63,0x6f,0x43,0x6f,0x6f,
	0x20,0x20,0x40,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x63,0x63,0x63,0x3a,0x3a,0x3a,0x3a,
	0x3a,0x63,0x63,0x63,0x6f,0x6f,0x63,0x3a,0x4f,0x20,0x40,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0a,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x20,0x40,0x43,0x63,0x63,0x6f,
	0x63,0x63,0x3a,0x3a,0x3a,0x3a,0x3a,0x2e,0x3a,0x3a,0x3a,0x3a,0x3a,0x6f,0x40,0x6f,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x20,0x40,0x43,0x6f,
	0x6f,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x63,0x63,0x3a,
	0x63,0x3a,0x63,0x3a,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x0a,0x20,0x20,0x40,0x20,0x40,0x40,0x40,0x40,0x40,0x40,
	0x6f,0x6f,0x6f,0x63,0x3a,0x3a,0x63,0x38,0x38,0x63,0x63,0x3a,0x3a,0x3a,0x3a,0x3a,
	0x3a,0x63,0x63,0x63,0x6f,0x63,0x63,0x3a,0x43,0x40,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,
	0x20,0x20,0x20,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0a,0x40,0x40,0x40,0x6f,0x6f,
	0x3a,0x3a,0x63,0x3a,0x63,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x63,0x20,0x40,0x40,0x63,
	0x3a,0x3a,0x3a,0x3a,0x63,0x3a,0x63,0x63,0x3a,0x3a,0x2e,0x3a,0x6f,0x4f,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x20,
	0x20,0x40,0x40,0x40,0x43,0x63,0x63,0x63,0x6f,0x63,0x6f,0x63,0x63,0x63,0x63,0x63,
	0x63,0x63,0x63,0x63,0x3a,0x63,0x43,0x40,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0a,
	0x40,0x4f,0x40,0x6f,0x3a,0x3a,0x2e,0x2e,0x2e,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,
	0x20,0x20,0x40,0x43,0x6f,0x3a,0x3a,0x3a,0x63,0x3a,0x63,0x3a,0x63,0x63,0x63,0x63,
	0x63,0x63,0x6f,0x63,0x6f,0x40,0x40,0x40,0x40,0x40,0x38,0x40,0x40,0x40,0x40,0x40,
	0x40,0x4f,0x4f,0x63,0x6f,0x2e,0x6f,0x63,0x6f,0x63,0x63,0x3a,0x3a,0x3a,0x3a,0x3a,
	0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x63,0x63,0x3a,0x43,0x40,
	0x38,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x0a,0x40,0x40,0x20,0x38,0x3a,0x63,0x3a,0x3a,0x3a,0x3a,0x3a,
	0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x63,0x3a,0x63,
	0x63,0x63,0x63,0x63,0x3a,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,
	0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x3a,0x3a,0x63,0x3a,
	0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,
	0x3a,0x3a,0x3a,0x63,0x3a,0x63,0x38,0x20,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0a,0x20,0x20,0x20,0x40,0x6f,0x3a,
	0x63,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,
	0x3a,0x63,0x3a,0x63,0x63,0x63,0x63,0x63,0x3a,0x63,0x63,0x63,0x63,0x63,0x63,0x63,
	0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,
	0x63,0x3a,0x3a,0x63,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,
	0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x63,0x3a,0x38,0x20,0x40,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0a,0x20,
	0x20,0x20,0x40,0x20,0x38,0x43,0x2e,0x3a,0x2e,0x2e,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,
	0x3a,0x3a,0x3a,0x3a,0x3a,0x63,0x3a,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,
	0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x3a,0x63,0x63,0x63,0x63,0x63,0x63,0x63,
	0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,
	0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x2e,0x20,0x3a,0x3a,0x3a,
	0x63,0x3a,0x4f,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x0a,0x20,0x20,0x20,0x20,0x20,0x40,0x20,0x20,0x20,0x4f,0x63,0x3a,
	0x63,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x63,0x63,0x63,0x63,0x6f,0x63,
	0x6f,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x3a,0x63,0x63,0x63,0x63,0x63,
	0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x3a,0x3a,0x3a,0x3a,
	0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,
	0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x63,0x3a,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x40,0x40,0x43,0x6f,0x3a,0x6f,0x63,0x6f,0x63,0x6f,0x6f,
	0x63,0x43,0x43,0x40,0x40,0x63,0x3a,0x6f,0x6f,0x63,0x63,0x63,0x63,0x63,0x3a,0x6f,
	0x6f,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,
	0x63,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x63,0x63,0x63,0x3a,0x3a,0x3a,0x3a,0x3a,
	0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x63,0x3a,0x40,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0a,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x4f,0x63,0x6f,
	0x63,0x63,0x63,0x3a,0x6f,0x6f,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x6f,0x63,0x63,
	0x63,0x63,0x63,0x63,0x63,0x63,0x3a,0x63,0x3a,0x3a,0x3a,0x3a,0x3a,0x63,0x63,0x3a,
	0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,
	0x3a,0x63,0x2e,0x40,0x40,0x40,0x40,0x20,0x20,0x40,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x40,0x38,0x38,0x63,0x63,0x63,0x63,0x63,0x6f,0x63,0x63,0x63,0x63,0x63,
	0x63,0x63,0x63,0x6f,0x3a,0x63,0x3a,0x63,0x63,0x63,0x3a,0x63,0x3a,0x3a,0x3a,0x63,
	0x2e,0x6f,0x63,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,
	0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x63,0x3a,0x63,0x6f,0x40,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x40,0x40,0x63,0x3a,0x3a,0x6f,
	0x6f,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x6f,0x63,0x2e,0x3a,0x63,0x3a,0x63,0x3a,
	0x63,0x3a,0x3a,0x3a,0x3a,0x2e,0x6f,0x63,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,
	0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x63,0x3a,0x3a,0x3a,0x3a,
	0x3a,0x3a,0x3a,0x63,0x63,0x4f,0x40,0x20,0x20,0x20,0x20,0x20,0x0a,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x43,0x3a,0x3a,0x2e,0x6f,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x3a,
	0x63,0x63,0x3a,0x63,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x63,0x3a,0x63,0x63,0x3a,0x3a,
	0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x2e,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,
	0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x63,0x63,0x6f,0x40,0x20,0x20,
	0x20,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x63,0x63,0x3a,0x3a,0x6f,0x63,0x63,0x63,0x63,
	0x63,0x63,0x63,0x6f,0x3a,0x6f,0x63,0x63,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,
	0x3a,0x63,0x63,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x2e,0x3a,0x3a,0x3a,
	0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x40,0x2e,0x40,0x3a,0x63,0x3a,0x3a,0x3a,0x3a,0x3a,
	0x3a,0x63,0x43,0x40,0x20,0x20,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x3a,0x3a,0x3a,
	0x63,0x3a,0x63,0x63,0x63,0x63,0x3a,0x63,0x63,0x63,0x6f,0x3a,0x63,0x63,0x63,0x6f,
	0x63,0x63,0x63,0x63,0x63,0x3a,0x63,0x63,0x63,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,
	0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x40,0x20,0x20,0x20,0x38,0x63,
	0x63,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x63,0x3a,0x40,0x20,0x0a,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x6f,0x63,0x3a,0x3a,0x63,0x3a,0x3a,0x3a,0x3a,0x63,0x3a,0x3a,0x43,0x4f,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x63,0x63,0x63,0x3a,0x63,0x3a,
	0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x63,0x3a,0x43,0x20,0x40,
	0x20,0x20,0x20,0x20,0x40,0x3a,0x63,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x2e,0x4f,0x20,
	0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x63,0x63,0x3a,0x63,0x63,0x3a,0x3a,0x3a,
	0x3a,0x63,0x3a,0x40,0x40,0x20,0x20,0x40,0x20,0x20,0x20,0x20,0x20,0x40,0x40,0x40,
	0x63,0x63,0x63,0x3a,0x63,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x63,
	0x3a,0x40,0x38,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x3a,0x63,0x3a,0x3a,0x3a,0x3a,
	0x3a,0x3a,0x3a,0x43,0x40,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x20,0x38,0x63,0x63,0x6f,0x6f,0x63,
	0x3a,0x63,0x3a,0x3a,0x3a,0x3a,0x63,0x3a,0x6f,0x40,0x63,0x3a,0x63,0x63,0x63,0x63,
	0x3a,0x63,0x6f,0x63,0x63,0x63,0x63,0x63,0x63,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,
	0x3a,0x3a,0x3a,0x3a,0x63,0x3a,0x40,0x20,0x40,0x20,0x20,0x40,0x20,0x40,0x63,0x6f,
	0x63,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x63,0x6f,0x40,0x0a,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x4f,0x63,0x63,
	0x6f,0x63,0x63,0x63,0x63,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x63,0x6f,0x40,0x3a,0x3a,
	0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x63,0x63,0x63,0x63,0x63,0x63,0x3a,0x2e,0x3a,0x3a,
	0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x63,0x3a,0x63,0x40,0x20,0x20,
	0x40,0x6f,0x3a,0x6f,0x63,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x63,0x6f,0x40,0x0a,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x6f,0x63,0x63,0x63,0x63,0x63,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x63,
	0x3a,0x38,0x38,0x63,0x3a,0x3a,0x3a,0x3a,0x63,0x63,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,
	0x2e,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,
	0x63,0x6f,0x40,0x6f,0x4f,0x6f,0x6f,0x63,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,
	0x63,0x2e,0x40,0x20,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x6f,0x63,0x2e,0x6f,0x3a,0x3a,0x3a,0x3a,
	0x3a,0x3a,0x3a,0x3a,0x3a,0x4f,0x20,0x20,0x40,0x40,0x43,0x63,0x63,0x3a,0x2e,0x2e,
	0x63,0x63,0x6f,0x63,0x6f,0x63,0x6f,0x6f,0x6f,0x6f,0x6f,0x6f,0x6f,0x43,0x6f,0x43,
	0x6f,0x6f,0x63,0x6f,0x6f,0x63,0x6f,0x6f,0x6f,0x63,0x63,0x3a,0x3a,0x3a,0x3a,0x3a,
	0x3a,0x3a,0x3a,0x2e,0x63,0x63,0x6f,0x40,0x20,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x63,
	0x63,0x3a,0x63,0x6f,0x63,0x3a,0x3a,0x3a,0x2e,0x40,0x20,0x20,0x20,0x20,0x40,0x43,
	0x3a,0x63,0x63,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x63,0x63,0x63,0x63,0x63,0x63,
	0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x3a,
	0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x6f,0x2e,0x4f,0x20,0x40,0x20,0x0a,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x40,0x40,0x40,0x6f,0x63,0x6f,0x63,0x63,0x63,0x3a,0x38,0x40,0x20,0x20,
	0x40,0x43,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x63,0x63,0x63,0x63,0x63,
	0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,
	0x63,0x63,0x63,0x63,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x63,0x63,0x3a,0x63,0x38,0x20,
	0x40,0x20,0x20,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x40,0x40,0x20,0x40,0x3a,0x3a,0x3a,0x3a,0x63,0x63,0x63,0x63,0x3a,0x63,0x63,
	0x63,0x6f,0x63,0x6f,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,
	0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x63,0x3a,0x3a,
	0x43,0x40,0x40,0x40,0x20,0x20,0x20,0x20,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x40,0x6f,0x3a,0x63,0x6f,0x63,0x4f,0x40,0x40,
	0x40,0x20,0x20,0x20,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x38,0x6f,0x63,0x63,0x6f,
	0x63,0x63,0x63,0x3a,0x63,0x6f,0x63,0x6f,0x63,0x6f,0x6f,0x63,0x6f,0x3a,0x63,0x3a,
	0x63,0x38,0x4f,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0a,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x4f,0x40,0x20,0x20,
	0x20,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x20,0x20,0x40,0x20,0x20,0x20,0x20,0x40,0x40,0x40,0x20,0x40,0x40,0x40,
	0x40,0x40,0x40,0x40,0x20,0x20,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
	0x20,0x20,0x0a,0x0a
	};


	printw((char*)imageBytes);
	getyx(stdscr, y, x);
	move(y, 0);
*/

	printw("Welcome to pMINK command-line interface (CLI)\n\n");

	printw(prompt.c_str());

	// loop
	while(true){
		tmp_ch = getch();

		// auto complete
		if(tmp_ch == '\t'){
			string tmp_lst[50];
			int tmp_size = 0;
			int res_size = 0;

			//print_cli_def(cli_def, 0, 1);

			printw("\n");

			// parse line
			//antlr::parse_line(&current_line, tmp_lst, 50, &tmp_size);
			antlr::parse_line(&current_line, tmp_lst, 50, &tmp_size, pmink_parser);

			// auto complete
			cli_auto_complete(cli_def, tmp_lst, tmp_size, &tmp_cli_res, &res_size);

			// replace current line with auto completed values
			current_line.clear();
			for(int i = 0; i<tmp_size; i++){
				current_line.append(tmp_lst[i]);
				if(i < res_size) current_line.append(" "); else break;
			}

			// print results
			print_cli_def(&tmp_cli_res, 0, 1);


			// check if all tokens were perfectly matched
			if(tmp_size == res_size){
				CLIItem* tmp_c = NULL;
				int params_set = 0;
				// check for children
				if(tmp_cli_res.children.size() > 0){
					// set pointer to first child
					tmp_c = tmp_cli_res.children[0];
					// METHOD or SCRIPT parent only
					if(tmp_c->parent->node_type == cli::CLI_SCRIPT || tmp_c->parent->node_type == cli::CLI_METHOD){
						// look for set parameters
						for(int i = 0; i<tmp_c->parent->children.size(); i++) if(tmp_c->parent->children[i]->is_set) params_set++;
						// all parameters are set
						if(params_set == tmp_c->parent->children.size()){
							attron(COLOR_PAIR(6));
							printw("%20s", "--> <cr> <--");
							printw("\n");
							attroff(COLOR_PAIR(6));
						}
					}
				// no multiples, all tokens matched
				}else{
					attron(COLOR_PAIR(6));
					printw("%20s", "--> <cr> <--");
					printw("\n");
					attroff(COLOR_PAIR(6));

				}


			}


			// clear
			for(int i = 0; i<tmp_cli_res.children.size(); i++) tmp_cli_res.children[i]->is_set = false;
			tmp_cli_res.children.clear();



			printw(prompt.c_str());
			printw(current_line.c_str());
		}else if(tmp_ch == '\n'){
			printw("\n");

			string tmp_lst[50];
			int tmp_size = 0;
			int res_size = 0;

			// parse line
			//antlr::parse_line(&current_line, tmp_lst, 50, &tmp_size);
			antlr::parse_line(&current_line, tmp_lst, 50, &tmp_size, pmink_parser);
			// auto complete
			cli_auto_complete(cli_def, tmp_lst, tmp_size, &tmp_cli_res, &res_size);

			// replace current line with auto completed values
			current_line.clear();
			for(int i = 0; i<tmp_size; i++){
				current_line.append(tmp_lst[i]);
				if(i < res_size) current_line.append(" "); else break;
			}


			// check if all tokens were perfectly matched
			if(tmp_size == res_size){
				CLIItem* tmp_c = NULL;
				int params_set = 0;
				// check for children
				if(tmp_cli_res.children.size() > 0){
					// set pointer to first child
					tmp_c = tmp_cli_res.children[0];
					// METHOD or SCRIPT parent only
					if(tmp_c->parent->node_type == cli::CLI_SCRIPT || tmp_c->parent->node_type == cli::CLI_METHOD){
						bool p_valid;
						int err_c = 0;
						std::string tmp_str(tmp_c->parent->script_path + " ");
						// parameters loop
						for(int i = 0; i<tmp_c->parent->children.size(); i++) if(tmp_c->parent->children[i]->is_set){
							// construct script arguments
							tmp_str += tmp_c->parent->children[i]->name + "=" + tmp_c->parent->children[i]->param_value + " ";
							// check if argument is valid
							p_valid = param_valid(&tmp_c->parent->children[i]->param_value, &tmp_c->parent->children[i]->type);
							// display error
							if(!p_valid){
								err_c++;
								attron(COLOR_PAIR(1));
								printw("ERROR: ");
								attroff(COLOR_PAIR(1));
								printw("Parameter \"%s\" contains invalid \"%s\" value \"%s\"!\n", 	tmp_c->parent->children[i]->name.c_str(),
																									tmp_c->parent->children[i]->type.c_str(),
																									tmp_c->parent->children[i]->param_value.c_str());

							}
						}
						// run method/script
						if(err_c == 0) pmink_utils::run_external_print(tmp_str.c_str(), true);

					}
				// no multiples, all tokens matched
				}else{
					// run method/script
					pmink_utils::run_external_print(tmp_cli_res.children[0]->script_path.c_str(), true);

				}


			}


			// clear
			for(int i = 0; i<tmp_cli_res.children.size(); i++) tmp_cli_res.children[i]->is_set = false;
			tmp_cli_res.children.clear();

			// add to history
			add_to_history(&current_line);
			history_index = history.size();

			// reset line
			current_line = "";
			printw(prompt.c_str());



		}else if(tmp_ch == KEY_BACKSPACE){
			getyx(stdscr, y, x);
			if(x > prompt.size()){
				printw("\b");
				delch();
				current_line.erase(current_line.size() - 1);

			}

		}else if(tmp_ch == CTRL('D')){
			break;
		}else if(tmp_ch == CTRL('L')){
			clear();
			printw(prompt.c_str());
			printw(current_line.c_str());
		}else if(tmp_ch == KEY_LEFT){
			/*
			getyx(stdscr, y, x);
			if(x > prompt.size()){
				printw("\b");
				arr_l++;

			}
			*/

		}else if(tmp_ch == KEY_RIGHT){
			/*
			if(arr_l > 0){
				//printw("\f");
				getyx(stdscr, y, x);
				move(y, x + 1);
				arr_l--;
			}
			*/

		// history UP
		}else if(tmp_ch == KEY_UP){
			--history_index;
			if(history_index < 0) history_index = 0;
			if(history.size() > history_index){
				current_line = *history[history_index];
				//cout << *history[history_index] << endl;
				getyx(stdscr, y, x);
				move(y, 0);
				clrtoeol();
				printw(prompt.c_str());
				printw(current_line.c_str());

			}

		// history DOWN
		}else if(tmp_ch == KEY_DOWN){
			++history_index;
			if(history_index >= history.size()) history_index = history.size() - 1;
			if(history.size() > history_index){
				//cout << *history[history_index] << endl;
				current_line = *history[history_index];
				getyx(stdscr, y, x);
				move(y, 0);
				clrtoeol();
				printw(prompt.c_str());
				printw(current_line.c_str());

			}


		}else{
			current_line.append((char*)&tmp_ch);
			printw("%c", tmp_ch);

		}

		refresh();

	}
	endwin();


}


